type UserProfile {
  userId: ID!
  name: String
  age: Int
  gender: String
  height: Float
  weight: Float
  createdAt: String
  updatedAt: String
}

type QuizResponse {
  userId: ID!
  questionId: String!
  questionText: String
  responseData: AWSJSON
  stepNumber: Int
  createdAt: String
  updatedAt: String
}

input UserProfileInput {
  userId: ID!
  name: String
  age: Int
  gender: String
  height: Float
  weight: Float
}

input QuizResponseInput {
  userId: ID!
  questionId: String!
  questionText: String
  responseData: AWSJSON
  stepNumber: Int
}

type Query {
  getUserProfile(userId: ID!): UserProfile
  getQuizResponses(userId: ID!): [QuizResponse]
}

type Mutation {
  createUserProfile(input: UserProfileInput!): UserProfile
  saveQuizResponse(input: QuizResponseInput!): QuizResponse
  updateUserProfile(input: UserProfileInput!): UserProfile
}

schema {
  query: Query
  mutation: Mutation
}
