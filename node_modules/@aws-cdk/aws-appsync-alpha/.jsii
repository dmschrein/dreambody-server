{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "aws-cdk-lib": "^2.59.0",
    "constructs": "^10.0.0"
  },
  "dependencyClosure": {
    "@aws-cdk/asset-awscli-v1": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.AwsCliV1",
          "packageId": "Amazon.CDK.Asset.AwsCliV1"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-awscli-go",
          "packageName": "awscliv1"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-awscli-v1",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.awscli.v1"
        },
        "js": {
          "npm": "@aws-cdk/asset-awscli-v1"
        },
        "python": {
          "distName": "aws-cdk.asset-awscli-v1",
          "module": "aws_cdk.asset_awscli_v1"
        }
      }
    },
    "@aws-cdk/asset-kubectl-v20": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.KubectlV20",
          "packageId": "Amazon.CDK.Asset.KubectlV20"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-kubectl-go",
          "packageName": "kubectlv20"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-kubectl-v20",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.kubectl.v20"
        },
        "js": {
          "npm": "@aws-cdk/asset-kubectl-v20"
        },
        "python": {
          "distName": "aws-cdk.asset-kubectl-v20",
          "module": "aws_cdk.asset_kubectl_v20"
        }
      }
    },
    "@aws-cdk/asset-node-proxy-agent-v5": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.NodeProxyAgentV5",
          "packageId": "Amazon.CDK.Asset.NodeProxyAgentV5"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-node-proxy-agent-go",
          "packageName": "nodeproxyagentv5"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-node-proxy-agent-v5",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.node.proxy.agent.v5"
        },
        "js": {
          "npm": "@aws-cdk/asset-node-proxy-agent-v5"
        },
        "python": {
          "distName": "aws-cdk.asset-node-proxy-agent-v5",
          "module": "aws_cdk.asset_node_proxy_agent_v5"
        }
      }
    },
    "aws-cdk-lib": {
      "submodules": {
        "aws-cdk-lib.alexa_ask": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Alexa.Ask"
            },
            "java": {
              "package": "software.amazon.awscdk.alexa.ask"
            },
            "python": {
              "module": "aws_cdk.alexa_ask"
            }
          }
        },
        "aws-cdk-lib.assertions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assertions"
            },
            "java": {
              "package": "software.amazon.awscdk.assertions"
            },
            "python": {
              "module": "aws_cdk.assertions"
            }
          }
        },
        "aws-cdk-lib.assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.assets"
            },
            "python": {
              "module": "aws_cdk.assets"
            }
          }
        },
        "aws-cdk-lib.aws_accessanalyzer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AccessAnalyzer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.accessanalyzer"
            },
            "python": {
              "module": "aws_cdk.aws_accessanalyzer"
            }
          }
        },
        "aws-cdk-lib.aws_acmpca": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ACMPCA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.acmpca"
            },
            "python": {
              "module": "aws_cdk.aws_acmpca"
            }
          }
        },
        "aws-cdk-lib.aws_amazonmq": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmazonMQ"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amazonmq"
            },
            "python": {
              "module": "aws_cdk.aws_amazonmq"
            }
          }
        },
        "aws-cdk-lib.aws_amplify": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Amplify"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplify"
            },
            "python": {
              "module": "aws_cdk.aws_amplify"
            }
          }
        },
        "aws-cdk-lib.aws_amplifyuibuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmplifyUIBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplifyuibuilder"
            },
            "python": {
              "module": "aws_cdk.aws_amplifyuibuilder"
            }
          }
        },
        "aws-cdk-lib.aws_apigateway": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APIGateway"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigateway"
            },
            "python": {
              "module": "aws_cdk.aws_apigateway"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Apigatewayv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigatewayv2"
            },
            "python": {
              "module": "aws_cdk.aws_apigatewayv2"
            }
          }
        },
        "aws-cdk-lib.aws_appconfig": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppConfig"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appconfig"
            },
            "python": {
              "module": "aws_cdk.aws_appconfig"
            }
          }
        },
        "aws-cdk-lib.aws_appflow": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppFlow"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appflow"
            },
            "python": {
              "module": "aws_cdk.aws_appflow"
            }
          }
        },
        "aws-cdk-lib.aws_appintegrations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppIntegrations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appintegrations"
            },
            "python": {
              "module": "aws_cdk.aws_appintegrations"
            }
          }
        },
        "aws-cdk-lib.aws_applicationautoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationautoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_applicationautoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_applicationinsights": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationInsights"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationinsights"
            },
            "python": {
              "module": "aws_cdk.aws_applicationinsights"
            }
          }
        },
        "aws-cdk-lib.aws_appmesh": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppMesh"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appmesh"
            },
            "python": {
              "module": "aws_cdk.aws_appmesh"
            }
          }
        },
        "aws-cdk-lib.aws_apprunner": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppRunner"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apprunner"
            },
            "python": {
              "module": "aws_cdk.aws_apprunner"
            }
          }
        },
        "aws-cdk-lib.aws_appstream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppStream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appstream"
            },
            "python": {
              "module": "aws_cdk.aws_appstream"
            }
          }
        },
        "aws-cdk-lib.aws_appsync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appsync"
            },
            "python": {
              "module": "aws_cdk.aws_appsync"
            }
          }
        },
        "aws-cdk-lib.aws_aps": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.aps"
            },
            "python": {
              "module": "aws_cdk.aws_aps"
            }
          }
        },
        "aws-cdk-lib.aws_athena": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Athena"
            },
            "java": {
              "package": "software.amazon.awscdk.services.athena"
            },
            "python": {
              "module": "aws_cdk.aws_athena"
            }
          }
        },
        "aws-cdk-lib.aws_auditmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AuditManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.auditmanager"
            },
            "python": {
              "module": "aws_cdk.aws_auditmanager"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_common": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.Common"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.common"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_common"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_hooktargets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_hooktargets"
            }
          }
        },
        "aws-cdk-lib.aws_autoscalingplans": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScalingPlans"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscalingplans"
            },
            "python": {
              "module": "aws_cdk.aws_autoscalingplans"
            }
          }
        },
        "aws-cdk-lib.aws_backup": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Backup"
            },
            "java": {
              "package": "software.amazon.awscdk.services.backup"
            },
            "python": {
              "module": "aws_cdk.aws_backup"
            }
          }
        },
        "aws-cdk-lib.aws_batch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Batch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.batch"
            },
            "python": {
              "module": "aws_cdk.aws_batch"
            }
          }
        },
        "aws-cdk-lib.aws_billingconductor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.BillingConductor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.billingconductor"
            },
            "python": {
              "module": "aws_cdk.aws_billingconductor"
            }
          }
        },
        "aws-cdk-lib.aws_budgets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Budgets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.budgets"
            },
            "python": {
              "module": "aws_cdk.aws_budgets"
            }
          }
        },
        "aws-cdk-lib.aws_cassandra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cassandra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cassandra"
            },
            "python": {
              "module": "aws_cdk.aws_cassandra"
            }
          }
        },
        "aws-cdk-lib.aws_ce": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CE"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ce"
            },
            "python": {
              "module": "aws_cdk.aws_ce"
            }
          }
        },
        "aws-cdk-lib.aws_certificatemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CertificateManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.certificatemanager"
            },
            "python": {
              "module": "aws_cdk.aws_certificatemanager"
            }
          }
        },
        "aws-cdk-lib.aws_chatbot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Chatbot"
            },
            "java": {
              "package": "software.amazon.awscdk.services.chatbot"
            },
            "python": {
              "module": "aws_cdk.aws_chatbot"
            }
          }
        },
        "aws-cdk-lib.aws_cloud9": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cloud9"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloud9"
            },
            "python": {
              "module": "aws_cdk.aws_cloud9"
            }
          }
        },
        "aws-cdk-lib.aws_cloudformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudformation"
            },
            "python": {
              "module": "aws_cdk.aws_cloudformation"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront.experimental": {},
        "aws-cdk-lib.aws_cloudfront_origins": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront.Origins"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront.origins"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront_origins"
            }
          }
        },
        "aws-cdk-lib.aws_cloudtrail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudTrail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudtrail"
            },
            "python": {
              "module": "aws_cdk.aws_cloudtrail"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch.actions"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codeartifact": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeArtifact"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeartifact"
            },
            "python": {
              "module": "aws_cdk.aws_codeartifact"
            }
          }
        },
        "aws-cdk-lib.aws_codebuild": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeBuild"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codebuild"
            },
            "python": {
              "module": "aws_cdk.aws_codebuild"
            }
          }
        },
        "aws-cdk-lib.aws_codecommit": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeCommit"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codecommit"
            },
            "python": {
              "module": "aws_cdk.aws_codecommit"
            }
          }
        },
        "aws-cdk-lib.aws_codedeploy": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeDeploy"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codedeploy"
            },
            "python": {
              "module": "aws_cdk.aws_codedeploy"
            }
          }
        },
        "aws-cdk-lib.aws_codeguruprofiler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruProfiler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeguruprofiler"
            },
            "python": {
              "module": "aws_cdk.aws_codeguruprofiler"
            }
          }
        },
        "aws-cdk-lib.aws_codegurureviewer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruReviewer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codegurureviewer"
            },
            "python": {
              "module": "aws_cdk.aws_codegurureviewer"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline.actions"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codestar": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Codestar"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestar"
            },
            "python": {
              "module": "aws_cdk.aws_codestar"
            }
          }
        },
        "aws-cdk-lib.aws_codestarconnections": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarConnections"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarconnections"
            },
            "python": {
              "module": "aws_cdk.aws_codestarconnections"
            }
          }
        },
        "aws-cdk-lib.aws_codestarnotifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarNotifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarnotifications"
            },
            "python": {
              "module": "aws_cdk.aws_codestarnotifications"
            }
          }
        },
        "aws-cdk-lib.aws_cognito": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cognito"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cognito"
            },
            "python": {
              "module": "aws_cdk.aws_cognito"
            }
          }
        },
        "aws-cdk-lib.aws_config": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Config"
            },
            "java": {
              "package": "software.amazon.awscdk.services.config"
            },
            "python": {
              "module": "aws_cdk.aws_config"
            }
          }
        },
        "aws-cdk-lib.aws_connect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Connect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connect"
            },
            "python": {
              "module": "aws_cdk.aws_connect"
            }
          }
        },
        "aws-cdk-lib.aws_connectcampaigns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ConnectCampaigns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connectcampaigns"
            },
            "python": {
              "module": "aws_cdk.aws_connectcampaigns"
            }
          }
        },
        "aws-cdk-lib.aws_controltower": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ControlTower"
            },
            "java": {
              "package": "software.amazon.awscdk.services.controltower"
            },
            "python": {
              "module": "aws_cdk.aws_controltower"
            }
          }
        },
        "aws-cdk-lib.aws_cur": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CUR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cur"
            },
            "python": {
              "module": "aws_cdk.aws_cur"
            }
          }
        },
        "aws-cdk-lib.aws_customerprofiles": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CustomerProfiles"
            },
            "java": {
              "package": "software.amazon.awscdk.services.customerprofiles"
            },
            "python": {
              "module": "aws_cdk.aws_customerprofiles"
            }
          }
        },
        "aws-cdk-lib.aws_databrew": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataBrew"
            },
            "java": {
              "package": "software.amazon.awscdk.services.databrew"
            },
            "python": {
              "module": "aws_cdk.aws_databrew"
            }
          }
        },
        "aws-cdk-lib.aws_datapipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataPipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datapipeline"
            },
            "python": {
              "module": "aws_cdk.aws_datapipeline"
            }
          }
        },
        "aws-cdk-lib.aws_datasync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datasync"
            },
            "python": {
              "module": "aws_cdk.aws_datasync"
            }
          }
        },
        "aws-cdk-lib.aws_dax": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DAX"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dax"
            },
            "python": {
              "module": "aws_cdk.aws_dax"
            }
          }
        },
        "aws-cdk-lib.aws_detective": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Detective"
            },
            "java": {
              "package": "software.amazon.awscdk.services.detective"
            },
            "python": {
              "module": "aws_cdk.aws_detective"
            }
          }
        },
        "aws-cdk-lib.aws_devopsguru": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DevOpsGuru"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devopsguru"
            },
            "python": {
              "module": "aws_cdk.aws_devopsguru"
            }
          }
        },
        "aws-cdk-lib.aws_directoryservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DirectoryService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.directoryservice"
            },
            "python": {
              "module": "aws_cdk.aws_directoryservice"
            }
          }
        },
        "aws-cdk-lib.aws_dlm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DLM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dlm"
            },
            "python": {
              "module": "aws_cdk.aws_dlm"
            }
          }
        },
        "aws-cdk-lib.aws_dms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dms"
            },
            "python": {
              "module": "aws_cdk.aws_dms"
            }
          }
        },
        "aws-cdk-lib.aws_docdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdb"
            },
            "python": {
              "module": "aws_cdk.aws_docdb"
            }
          }
        },
        "aws-cdk-lib.aws_docdbelastic": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDBElastic"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdbelastic"
            },
            "python": {
              "module": "aws_cdk.aws_docdbelastic"
            }
          }
        },
        "aws-cdk-lib.aws_dynamodb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DynamoDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dynamodb"
            },
            "python": {
              "module": "aws_cdk.aws_dynamodb"
            }
          }
        },
        "aws-cdk-lib.aws_ec2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EC2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ec2"
            },
            "python": {
              "module": "aws_cdk.aws_ec2"
            }
          }
        },
        "aws-cdk-lib.aws_ecr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr"
            },
            "python": {
              "module": "aws_cdk.aws_ecr"
            }
          }
        },
        "aws-cdk-lib.aws_ecr_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ecr.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr.assets"
            },
            "python": {
              "module": "aws_cdk.aws_ecr_assets"
            }
          }
        },
        "aws-cdk-lib.aws_ecs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs"
            },
            "python": {
              "module": "aws_cdk.aws_ecs"
            }
          }
        },
        "aws-cdk-lib.aws_ecs_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_ecs_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_efs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EFS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.efs"
            },
            "python": {
              "module": "aws_cdk.aws_efs"
            }
          }
        },
        "aws-cdk-lib.aws_eks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EKS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eks"
            },
            "python": {
              "module": "aws_cdk.aws_eks"
            }
          }
        },
        "aws-cdk-lib.aws_elasticache": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElastiCache"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticache"
            },
            "python": {
              "module": "aws_cdk.aws_elasticache"
            }
          }
        },
        "aws-cdk-lib.aws_elasticbeanstalk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticBeanstalk"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticbeanstalk"
            },
            "python": {
              "module": "aws_cdk.aws_elasticbeanstalk"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancing": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancing"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancing"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.actions"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_actions"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.targets"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_targets"
            }
          }
        },
        "aws-cdk-lib.aws_elasticsearch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Elasticsearch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticsearch"
            },
            "python": {
              "module": "aws_cdk.aws_elasticsearch"
            }
          }
        },
        "aws-cdk-lib.aws_emr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emr"
            },
            "python": {
              "module": "aws_cdk.aws_emr"
            }
          }
        },
        "aws-cdk-lib.aws_emrcontainers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRContainers"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrcontainers"
            },
            "python": {
              "module": "aws_cdk.aws_emrcontainers"
            }
          }
        },
        "aws-cdk-lib.aws_emrserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrserverless"
            },
            "python": {
              "module": "aws_cdk.aws_emrserverless"
            }
          }
        },
        "aws-cdk-lib.aws_events": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events"
            },
            "python": {
              "module": "aws_cdk.aws_events"
            }
          }
        },
        "aws-cdk-lib.aws_events_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events.targets"
            },
            "python": {
              "module": "aws_cdk.aws_events_targets"
            }
          }
        },
        "aws-cdk-lib.aws_eventschemas": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EventSchemas"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eventschemas"
            },
            "python": {
              "module": "aws_cdk.aws_eventschemas"
            }
          }
        },
        "aws-cdk-lib.aws_evidently": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Evidently"
            },
            "java": {
              "package": "software.amazon.awscdk.services.evidently"
            },
            "python": {
              "module": "aws_cdk.aws_evidently"
            }
          }
        },
        "aws-cdk-lib.aws_finspace": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FinSpace"
            },
            "java": {
              "package": "software.amazon.awscdk.services.finspace"
            },
            "python": {
              "module": "aws_cdk.aws_finspace"
            }
          }
        },
        "aws-cdk-lib.aws_fis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FIS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fis"
            },
            "python": {
              "module": "aws_cdk.aws_fis"
            }
          }
        },
        "aws-cdk-lib.aws_fms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fms"
            },
            "python": {
              "module": "aws_cdk.aws_fms"
            }
          }
        },
        "aws-cdk-lib.aws_forecast": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Forecast"
            },
            "java": {
              "package": "software.amazon.awscdk.services.forecast"
            },
            "python": {
              "module": "aws_cdk.aws_forecast"
            }
          }
        },
        "aws-cdk-lib.aws_frauddetector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FraudDetector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.frauddetector"
            },
            "python": {
              "module": "aws_cdk.aws_frauddetector"
            }
          }
        },
        "aws-cdk-lib.aws_fsx": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FSx"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fsx"
            },
            "python": {
              "module": "aws_cdk.aws_fsx"
            }
          }
        },
        "aws-cdk-lib.aws_gamelift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GameLift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.gamelift"
            },
            "python": {
              "module": "aws_cdk.aws_gamelift"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator_endpoints": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator.Endpoints"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator.endpoints"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator_endpoints"
            }
          }
        },
        "aws-cdk-lib.aws_glue": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Glue"
            },
            "java": {
              "package": "software.amazon.awscdk.services.glue"
            },
            "python": {
              "module": "aws_cdk.aws_glue"
            }
          }
        },
        "aws-cdk-lib.aws_grafana": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Grafana"
            },
            "java": {
              "package": "software.amazon.awscdk.services.grafana"
            },
            "python": {
              "module": "aws_cdk.aws_grafana"
            }
          }
        },
        "aws-cdk-lib.aws_greengrass": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Greengrass"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrass"
            },
            "python": {
              "module": "aws_cdk.aws_greengrass"
            }
          }
        },
        "aws-cdk-lib.aws_greengrassv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GreengrassV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrassv2"
            },
            "python": {
              "module": "aws_cdk.aws_greengrassv2"
            }
          }
        },
        "aws-cdk-lib.aws_groundstation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GroundStation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.groundstation"
            },
            "python": {
              "module": "aws_cdk.aws_groundstation"
            }
          }
        },
        "aws-cdk-lib.aws_guardduty": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GuardDuty"
            },
            "java": {
              "package": "software.amazon.awscdk.services.guardduty"
            },
            "python": {
              "module": "aws_cdk.aws_guardduty"
            }
          }
        },
        "aws-cdk-lib.aws_healthlake": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.HealthLake"
            },
            "java": {
              "package": "software.amazon.awscdk.services.healthlake"
            },
            "python": {
              "module": "aws_cdk.aws_healthlake"
            }
          }
        },
        "aws-cdk-lib.aws_iam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iam"
            },
            "python": {
              "module": "aws_cdk.aws_iam"
            }
          }
        },
        "aws-cdk-lib.aws_identitystore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IdentityStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.identitystore"
            },
            "python": {
              "module": "aws_cdk.aws_identitystore"
            }
          }
        },
        "aws-cdk-lib.aws_imagebuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ImageBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.imagebuilder"
            },
            "python": {
              "module": "aws_cdk.aws_imagebuilder"
            }
          }
        },
        "aws-cdk-lib.aws_inspector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Inspector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspector"
            },
            "python": {
              "module": "aws_cdk.aws_inspector"
            }
          }
        },
        "aws-cdk-lib.aws_inspectorv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InspectorV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspectorv2"
            },
            "python": {
              "module": "aws_cdk.aws_inspectorv2"
            }
          }
        },
        "aws-cdk-lib.aws_iot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot"
            },
            "python": {
              "module": "aws_cdk.aws_iot"
            }
          }
        },
        "aws-cdk-lib.aws_iot1click": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT1Click"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot1click"
            },
            "python": {
              "module": "aws_cdk.aws_iot1click"
            }
          }
        },
        "aws-cdk-lib.aws_iotanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_iotanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_iotcoredeviceadvisor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTCoreDeviceAdvisor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotcoredeviceadvisor"
            },
            "python": {
              "module": "aws_cdk.aws_iotcoredeviceadvisor"
            }
          }
        },
        "aws-cdk-lib.aws_iotevents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTEvents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotevents"
            },
            "python": {
              "module": "aws_cdk.aws_iotevents"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleethub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleethub"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleethub"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleetwise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleetwise"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleetwise"
            }
          }
        },
        "aws-cdk-lib.aws_iotsitewise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTSiteWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotsitewise"
            },
            "python": {
              "module": "aws_cdk.aws_iotsitewise"
            }
          }
        },
        "aws-cdk-lib.aws_iotthingsgraph": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTThingsGraph"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotthingsgraph"
            },
            "python": {
              "module": "aws_cdk.aws_iotthingsgraph"
            }
          }
        },
        "aws-cdk-lib.aws_iottwinmaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTTwinMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iottwinmaker"
            },
            "python": {
              "module": "aws_cdk.aws_iottwinmaker"
            }
          }
        },
        "aws-cdk-lib.aws_iotwireless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTWireless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotwireless"
            },
            "python": {
              "module": "aws_cdk.aws_iotwireless"
            }
          }
        },
        "aws-cdk-lib.aws_ivs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ivs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivs"
            },
            "python": {
              "module": "aws_cdk.aws_ivs"
            }
          }
        },
        "aws-cdk-lib.aws_kafkaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KafkaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kafkaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_kafkaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_kendra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kendra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendra"
            },
            "python": {
              "module": "aws_cdk.aws_kendra"
            }
          }
        },
        "aws-cdk-lib.aws_kinesis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kinesis"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesis"
            },
            "python": {
              "module": "aws_cdk.aws_kinesis"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalyticsv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalyticsV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalyticsv2"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalyticsv2"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisfirehose": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisFirehose"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisfirehose"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisfirehose"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisvideo": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisVideo"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisvideo"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisvideo"
            }
          }
        },
        "aws-cdk-lib.aws_kms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kms"
            },
            "python": {
              "module": "aws_cdk.aws_kms"
            }
          }
        },
        "aws-cdk-lib.aws_lakeformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LakeFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lakeformation"
            },
            "python": {
              "module": "aws_cdk.aws_lakeformation"
            }
          }
        },
        "aws-cdk-lib.aws_lambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda"
            },
            "python": {
              "module": "aws_cdk.aws_lambda"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_event_sources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.EventSources"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.eventsources"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_event_sources"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_nodejs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Nodejs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.nodejs"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_nodejs"
            }
          }
        },
        "aws-cdk-lib.aws_lex": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lex"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lex"
            },
            "python": {
              "module": "aws_cdk.aws_lex"
            }
          }
        },
        "aws-cdk-lib.aws_licensemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LicenseManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.licensemanager"
            },
            "python": {
              "module": "aws_cdk.aws_licensemanager"
            }
          }
        },
        "aws-cdk-lib.aws_lightsail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lightsail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lightsail"
            },
            "python": {
              "module": "aws_cdk.aws_lightsail"
            }
          }
        },
        "aws-cdk-lib.aws_location": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Location"
            },
            "java": {
              "package": "software.amazon.awscdk.services.location"
            },
            "python": {
              "module": "aws_cdk.aws_location"
            }
          }
        },
        "aws-cdk-lib.aws_logs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs"
            },
            "python": {
              "module": "aws_cdk.aws_logs"
            }
          }
        },
        "aws-cdk-lib.aws_logs_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_logs_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutequipment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutEquipment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutequipment"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutequipment"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutmetrics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutMetrics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutmetrics"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutmetrics"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutvision": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutVision"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutvision"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutvision"
            }
          }
        },
        "aws-cdk-lib.aws_m2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.M2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.m2"
            },
            "python": {
              "module": "aws_cdk.aws_m2"
            }
          }
        },
        "aws-cdk-lib.aws_macie": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Macie"
            },
            "java": {
              "package": "software.amazon.awscdk.services.macie"
            },
            "python": {
              "module": "aws_cdk.aws_macie"
            }
          }
        },
        "aws-cdk-lib.aws_managedblockchain": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ManagedBlockchain"
            },
            "java": {
              "package": "software.amazon.awscdk.services.managedblockchain"
            },
            "python": {
              "module": "aws_cdk.aws_managedblockchain"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconvert": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConvert"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconvert"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconvert"
            }
          }
        },
        "aws-cdk-lib.aws_medialive": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaLive"
            },
            "java": {
              "package": "software.amazon.awscdk.services.medialive"
            },
            "python": {
              "module": "aws_cdk.aws_medialive"
            }
          }
        },
        "aws-cdk-lib.aws_mediapackage": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaPackage"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediapackage"
            },
            "python": {
              "module": "aws_cdk.aws_mediapackage"
            }
          }
        },
        "aws-cdk-lib.aws_mediastore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediastore"
            },
            "python": {
              "module": "aws_cdk.aws_mediastore"
            }
          }
        },
        "aws-cdk-lib.aws_mediatailor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaTailor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediatailor"
            },
            "python": {
              "module": "aws_cdk.aws_mediatailor"
            }
          }
        },
        "aws-cdk-lib.aws_memorydb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MemoryDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.memorydb"
            },
            "python": {
              "module": "aws_cdk.aws_memorydb"
            }
          }
        },
        "aws-cdk-lib.aws_msk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MSK"
            },
            "java": {
              "package": "software.amazon.awscdk.services.msk"
            },
            "python": {
              "module": "aws_cdk.aws_msk"
            }
          }
        },
        "aws-cdk-lib.aws_mwaa": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MWAA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mwaa"
            },
            "python": {
              "module": "aws_cdk.aws_mwaa"
            }
          }
        },
        "aws-cdk-lib.aws_neptune": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Neptune"
            },
            "java": {
              "package": "software.amazon.awscdk.services.neptune"
            },
            "python": {
              "module": "aws_cdk.aws_neptune"
            }
          }
        },
        "aws-cdk-lib.aws_networkfirewall": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkFirewall"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkfirewall"
            },
            "python": {
              "module": "aws_cdk.aws_networkfirewall"
            }
          }
        },
        "aws-cdk-lib.aws_networkmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkmanager"
            },
            "python": {
              "module": "aws_cdk.aws_networkmanager"
            }
          }
        },
        "aws-cdk-lib.aws_nimblestudio": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NimbleStudio"
            },
            "java": {
              "package": "software.amazon.awscdk.services.nimblestudio"
            },
            "python": {
              "module": "aws_cdk.aws_nimblestudio"
            }
          }
        },
        "aws-cdk-lib.aws_oam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Oam"
            },
            "java": {
              "package": "software.amazon.awscdk.services.oam"
            },
            "python": {
              "module": "aws_cdk.aws_oam"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchserverless"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchserverless"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchservice"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchservice"
            }
          }
        },
        "aws-cdk-lib.aws_opsworks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworks"
            },
            "python": {
              "module": "aws_cdk.aws_opsworks"
            }
          }
        },
        "aws-cdk-lib.aws_opsworkscm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorksCM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworkscm"
            },
            "python": {
              "module": "aws_cdk.aws_opsworkscm"
            }
          }
        },
        "aws-cdk-lib.aws_organizations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Organizations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.organizations"
            },
            "python": {
              "module": "aws_cdk.aws_organizations"
            }
          }
        },
        "aws-cdk-lib.aws_panorama": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Panorama"
            },
            "java": {
              "package": "software.amazon.awscdk.services.panorama"
            },
            "python": {
              "module": "aws_cdk.aws_panorama"
            }
          }
        },
        "aws-cdk-lib.aws_personalize": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Personalize"
            },
            "java": {
              "package": "software.amazon.awscdk.services.personalize"
            },
            "python": {
              "module": "aws_cdk.aws_personalize"
            }
          }
        },
        "aws-cdk-lib.aws_pinpoint": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pinpoint"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpoint"
            },
            "python": {
              "module": "aws_cdk.aws_pinpoint"
            }
          }
        },
        "aws-cdk-lib.aws_pinpointemail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.PinpointEmail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpointemail"
            },
            "python": {
              "module": "aws_cdk.aws_pinpointemail"
            }
          }
        },
        "aws-cdk-lib.aws_pipes": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pipes"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pipes"
            },
            "python": {
              "module": "aws_cdk.aws_pipes"
            }
          }
        },
        "aws-cdk-lib.aws_qldb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QLDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.qldb"
            },
            "python": {
              "module": "aws_cdk.aws_qldb"
            }
          }
        },
        "aws-cdk-lib.aws_quicksight": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QuickSight"
            },
            "java": {
              "package": "software.amazon.awscdk.services.quicksight"
            },
            "python": {
              "module": "aws_cdk.aws_quicksight"
            }
          }
        },
        "aws-cdk-lib.aws_ram": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ram"
            },
            "python": {
              "module": "aws_cdk.aws_ram"
            }
          }
        },
        "aws-cdk-lib.aws_rds": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RDS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rds"
            },
            "python": {
              "module": "aws_cdk.aws_rds"
            }
          }
        },
        "aws-cdk-lib.aws_redshift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Redshift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshift"
            },
            "python": {
              "module": "aws_cdk.aws_redshift"
            }
          }
        },
        "aws-cdk-lib.aws_redshiftserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RedshiftServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshiftserverless"
            },
            "python": {
              "module": "aws_cdk.aws_redshiftserverless"
            }
          }
        },
        "aws-cdk-lib.aws_refactorspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RefactorSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.refactorspaces"
            },
            "python": {
              "module": "aws_cdk.aws_refactorspaces"
            }
          }
        },
        "aws-cdk-lib.aws_rekognition": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Rekognition"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rekognition"
            },
            "python": {
              "module": "aws_cdk.aws_rekognition"
            }
          }
        },
        "aws-cdk-lib.aws_resiliencehub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResilienceHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resiliencehub"
            },
            "python": {
              "module": "aws_cdk.aws_resiliencehub"
            }
          }
        },
        "aws-cdk-lib.aws_resourceexplorer2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceExplorer2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourceexplorer2"
            },
            "python": {
              "module": "aws_cdk.aws_resourceexplorer2"
            }
          }
        },
        "aws-cdk-lib.aws_resourcegroups": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceGroups"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourcegroups"
            },
            "python": {
              "module": "aws_cdk.aws_resourcegroups"
            }
          }
        },
        "aws-cdk-lib.aws_robomaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RoboMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.robomaker"
            },
            "python": {
              "module": "aws_cdk.aws_robomaker"
            }
          }
        },
        "aws-cdk-lib.aws_rolesanywhere": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RolesAnywhere"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rolesanywhere"
            },
            "python": {
              "module": "aws_cdk.aws_rolesanywhere"
            }
          }
        },
        "aws-cdk-lib.aws_route53": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53"
            },
            "python": {
              "module": "aws_cdk.aws_route53"
            }
          }
        },
        "aws-cdk-lib.aws_route53_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_route53_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_route53_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.targets"
            },
            "python": {
              "module": "aws_cdk.aws_route53_targets"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoverycontrol": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryControl"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoverycontrol"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoverycontrol"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoveryreadiness": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryReadiness"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoveryreadiness"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoveryreadiness"
            }
          }
        },
        "aws-cdk-lib.aws_route53resolver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53Resolver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53resolver"
            },
            "python": {
              "module": "aws_cdk.aws_route53resolver"
            }
          }
        },
        "aws-cdk-lib.aws_rum": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RUM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rum"
            },
            "python": {
              "module": "aws_cdk.aws_rum"
            }
          }
        },
        "aws-cdk-lib.aws_s3": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3"
            },
            "python": {
              "module": "aws_cdk.aws_s3"
            }
          }
        },
        "aws-cdk-lib.aws_s3_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.assets"
            },
            "python": {
              "module": "aws_cdk.aws_s3_assets"
            }
          }
        },
        "aws-cdk-lib.aws_s3_deployment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Deployment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.deployment"
            },
            "python": {
              "module": "aws_cdk.aws_s3_deployment"
            }
          }
        },
        "aws-cdk-lib.aws_s3_notifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Notifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.notifications"
            },
            "python": {
              "module": "aws_cdk.aws_s3_notifications"
            }
          }
        },
        "aws-cdk-lib.aws_s3objectlambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3ObjectLambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3objectlambda"
            },
            "python": {
              "module": "aws_cdk.aws_s3objectlambda"
            }
          }
        },
        "aws-cdk-lib.aws_s3outposts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3Outposts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3outposts"
            },
            "python": {
              "module": "aws_cdk.aws_s3outposts"
            }
          }
        },
        "aws-cdk-lib.aws_sagemaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Sagemaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sagemaker"
            },
            "python": {
              "module": "aws_cdk.aws_sagemaker"
            }
          }
        },
        "aws-cdk-lib.aws_sam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sam"
            },
            "python": {
              "module": "aws_cdk.aws_sam"
            }
          }
        },
        "aws-cdk-lib.aws_scheduler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Scheduler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.scheduler"
            },
            "python": {
              "module": "aws_cdk.aws_scheduler"
            }
          }
        },
        "aws-cdk-lib.aws_sdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sdb"
            },
            "python": {
              "module": "aws_cdk.aws_sdb"
            }
          }
        },
        "aws-cdk-lib.aws_secretsmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecretsManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.secretsmanager"
            },
            "python": {
              "module": "aws_cdk.aws_secretsmanager"
            }
          }
        },
        "aws-cdk-lib.aws_securityhub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecurityHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.securityhub"
            },
            "python": {
              "module": "aws_cdk.aws_securityhub"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalog": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalog"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalog"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalog"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalogappregistry": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalogappregistry"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalogappregistry"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalogappregistry"
            }
          }
        },
        "aws-cdk-lib.aws_servicediscovery": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ServiceDiscovery"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicediscovery"
            },
            "python": {
              "module": "aws_cdk.aws_servicediscovery"
            }
          }
        },
        "aws-cdk-lib.aws_ses": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses"
            },
            "python": {
              "module": "aws_cdk.aws_ses"
            }
          }
        },
        "aws-cdk-lib.aws_ses_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses.actions"
            },
            "python": {
              "module": "aws_cdk.aws_ses_actions"
            }
          }
        },
        "aws-cdk-lib.aws_signer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Signer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.signer"
            },
            "python": {
              "module": "aws_cdk.aws_signer"
            }
          }
        },
        "aws-cdk-lib.aws_sns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns"
            },
            "python": {
              "module": "aws_cdk.aws_sns"
            }
          }
        },
        "aws-cdk-lib.aws_sns_subscriptions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS.Subscriptions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns.subscriptions"
            },
            "python": {
              "module": "aws_cdk.aws_sns_subscriptions"
            }
          }
        },
        "aws-cdk-lib.aws_sqs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SQS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sqs"
            },
            "python": {
              "module": "aws_cdk.aws_sqs"
            }
          }
        },
        "aws-cdk-lib.aws_ssm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssm"
            },
            "python": {
              "module": "aws_cdk.aws_ssm"
            }
          }
        },
        "aws-cdk-lib.aws_ssmcontacts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMContacts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmcontacts"
            },
            "python": {
              "module": "aws_cdk.aws_ssmcontacts"
            }
          }
        },
        "aws-cdk-lib.aws_ssmincidents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMIncidents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmincidents"
            },
            "python": {
              "module": "aws_cdk.aws_ssmincidents"
            }
          }
        },
        "aws-cdk-lib.aws_sso": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSO"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sso"
            },
            "python": {
              "module": "aws_cdk.aws_sso"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions_tasks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions.Tasks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions.tasks"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions_tasks"
            }
          }
        },
        "aws-cdk-lib.aws_supportapp": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SupportApp"
            },
            "java": {
              "package": "software.amazon.awscdk.services.supportapp"
            },
            "python": {
              "module": "aws_cdk.aws_supportapp"
            }
          }
        },
        "aws-cdk-lib.aws_synthetics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Synthetics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.synthetics"
            },
            "python": {
              "module": "aws_cdk.aws_synthetics"
            }
          }
        },
        "aws-cdk-lib.aws_timestream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Timestream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.timestream"
            },
            "python": {
              "module": "aws_cdk.aws_timestream"
            }
          }
        },
        "aws-cdk-lib.aws_transfer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Transfer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.transfer"
            },
            "python": {
              "module": "aws_cdk.aws_transfer"
            }
          }
        },
        "aws-cdk-lib.aws_voiceid": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VoiceID"
            },
            "java": {
              "package": "software.amazon.awscdk.services.voiceid"
            },
            "python": {
              "module": "aws_cdk.aws_voiceid"
            }
          }
        },
        "aws-cdk-lib.aws_waf": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAF"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf"
            },
            "python": {
              "module": "aws_cdk.aws_waf"
            }
          }
        },
        "aws-cdk-lib.aws_wafregional": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFRegional"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf.regional"
            },
            "python": {
              "module": "aws_cdk.aws_wafregional"
            }
          }
        },
        "aws-cdk-lib.aws_wafv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wafv2"
            },
            "python": {
              "module": "aws_cdk.aws_wafv2"
            }
          }
        },
        "aws-cdk-lib.aws_wisdom": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Wisdom"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wisdom"
            },
            "python": {
              "module": "aws_cdk.aws_wisdom"
            }
          }
        },
        "aws-cdk-lib.aws_workspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WorkSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspaces"
            },
            "python": {
              "module": "aws_cdk.aws_workspaces"
            }
          }
        },
        "aws-cdk-lib.aws_xray": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.XRay"
            },
            "java": {
              "package": "software.amazon.awscdk.services.xray"
            },
            "python": {
              "module": "aws_cdk.aws_xray"
            }
          }
        },
        "aws-cdk-lib.cloud_assembly_schema": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudAssembly.Schema"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudassembly.schema"
            },
            "python": {
              "module": "aws_cdk.cloud_assembly_schema"
            }
          }
        },
        "aws-cdk-lib.cloudformation_include": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudFormation.Include"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudformation.include"
            },
            "python": {
              "module": "aws_cdk.cloudformation_include"
            }
          }
        },
        "aws-cdk-lib.custom_resources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CustomResources"
            },
            "java": {
              "package": "software.amazon.awscdk.customresources"
            },
            "python": {
              "module": "aws_cdk.custom_resources"
            }
          }
        },
        "aws-cdk-lib.cx_api": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CXAPI"
            },
            "java": {
              "package": "software.amazon.awscdk.cxapi"
            },
            "python": {
              "module": "aws_cdk.cx_api"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_awscli": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.AwsCli"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.awscli"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_awscli"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_kubectl": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.Kubectl"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.kubectl"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_kubectl"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_node_proxy_agent": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.NodeProxyAgent"
            },
            "java": {
              "package": "software.amazon.awscdk.lambda.layer.node.proxy.agent"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_node_proxy_agent"
            }
          }
        },
        "aws-cdk-lib.pipelines": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Pipelines"
            },
            "java": {
              "package": "software.amazon.awscdk.pipelines"
            },
            "python": {
              "module": "aws_cdk.pipelines"
            }
          }
        },
        "aws-cdk-lib.region_info": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.RegionInfo"
            },
            "java": {
              "package": "software.amazon.awscdk.regioninfo"
            },
            "python": {
              "module": "aws_cdk.region_info"
            }
          }
        },
        "aws-cdk-lib.triggers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Triggers"
            },
            "java": {
              "package": "software.amazon.awscdk.triggers"
            },
            "python": {
              "module": "aws_cdk.triggers"
            }
          }
        }
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK.Lib"
        },
        "go": {
          "moduleName": "github.com/aws/aws-cdk-go",
          "packageName": "awscdk"
        },
        "java": {
          "maven": {
            "artifactId": "aws-cdk-lib",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk"
        },
        "js": {
          "npm": "aws-cdk-lib"
        },
        "python": {
          "distName": "aws-cdk-lib",
          "module": "aws_cdk"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::AppSync",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.72.0 (build 4b8828b)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "appsync"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-appsync-alpha",
  "readme": {
    "markdown": "# AWS AppSync Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThe `@aws-cdk/aws-appsync` package contains constructs for building flexible\nAPIs that use GraphQL.\n\n```ts nofixture\nimport * as appsync from '@aws-cdk/aws-appsync-alpha';\n```\n\n## Example\n\n### DynamoDB\n\nExample of a GraphQL API with `AWS_IAM` [authorization](#authorization) resolving into a DynamoDb\nbackend data source.\n\nGraphQL schema file `schema.graphql`:\n\n```gql\ntype demo {\n  id: String!\n  version: String!\n}\ntype Query {\n  getDemos: [ demo! ]\n}\ninput DemoInput {\n  version: String!\n}\ntype Mutation {\n  addDemo(input: DemoInput!): demo\n}\n```\n\nCDK stack file `app-stack.ts`:\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n```\n\n\n\n### Aurora Serverless\n\nAppSync provides a data source for executing SQL commands against Amazon Aurora\nServerless clusters. You can use AppSync resolvers to execute SQL statements\nagainst the Data API with GraphQL queries, mutations, and subscriptions.\n\n```ts\n// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver('QueryGetDemosRdsResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver('MutationAddDemoRdsResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});\n```\n\n### HTTP Endpoints\n\nGraphQL schema file `schema.graphql`:\n\n```gql\ntype job {\n  id: String!\n  version: String!\n}\n\ninput DemoInput {\n  version: String!\n}\n\ntype Mutation {\n  callStepFunction(input: DemoInput!): job\n}\n```\n\nGraphQL request mapping template `request.vtl`:\n\n```json\n{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\": \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartExecution\"\n    },\n    \"body\": {\n      \"stateMachineArn\": \"<your step functions arn>\",\n      \"input\": \"{ \\\"id\\\": \\\"$context.arguments.id\\\" }\"\n    }\n  }\n}\n```\n\nGraphQL response mapping template `response.vtl`:\n\n```json\n{\n  \"id\": \"${context.result.id}\"\n}\n```\n\nCDK stack file `app-stack.ts`:\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n```\n\n### Amazon OpenSearch Service\n\nAppSync has builtin support for Amazon OpenSearch Service (successor to Amazon\nElasticsearch Service) from domains that are provisioned through your AWS account. You can\nuse AppSync resolvers to perform GraphQL operations such as queries, mutations, and\nsubscriptions.\n\n```ts\nimport * as opensearch from 'aws-cdk-lib/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_3,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver('QueryGetTestsResolver', {\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});\n```\n\n## Custom Domain Names\n\nFor many use cases you may want to associate a custom domain name with your\nGraphQL API. This can be done during the API creation.\n\n```ts\nimport * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst schema = new appsync.SchemaFile({ filePath: 'mySchemaFile' })\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: api.appSyncDomainName,\n});\n```\n\n## Log Group\n\nAppSync automatically create a log group with the name `/aws/appsync/apis/<graphql_api_id>` upon deployment with\nlog data set to never expire. If you want to set a different expiration period, use the `logConfig.retention` property.\n\nTo obtain the GraphQL API's log group as a `logs.ILogGroup` use the `logGroup` property of the\n`GraphqlApi` construct.\n\n```ts\nimport * as logs from 'aws-cdk-lib/aws-logs';\n\nconst logConfig: appsync.LogConfig = {\n  retention: logs.RetentionDays.ONE_WEEK,\n};\n\nnew appsync.GraphqlApi(this, 'api', {\n  authorizationConfig: {},\n  name: 'myApi',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'myApi.graphql')),\n  logConfig,\n});\n```\n\n## Schema\n\nYou can define a schema using from a local file using `SchemaFile.fromAsset`\n\n```ts\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphl')),\n});\n```\n\n### ISchema\n\nAlternative schema sources can be defined by implementing the `ISchema`\ninterface. An example of this is the `CodeFirstSchema` class provided in\n[awscdk-appsync-utils](https://github.com/cdklabs/awscdk-appsync-utils)\n\n## Imports\n\nAny GraphQL Api that has been created outside the stack can be imported from\nanother stack into your CDK app. Utilizing the `fromXxx` function, you have\nthe ability to add data sources and resolvers through a `IGraphqlApi` interface.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);\n```\n\nIf you don't specify `graphqlArn` in `fromXxxAttributes`, CDK will autogenerate\nthe expected `arn` for the imported api, given the `apiId`. For creating data\nsources and resolvers, an `apiId` is sufficient.\n\n## Authorization\n\nThere are multiple authorization types available for GraphQL API to cater to different\naccess use cases. They are:\n\n- API Keys (`AuthorizationType.API_KEY`)\n- Amazon Cognito User Pools (`AuthorizationType.USER_POOL`)\n- OpenID Connect (`AuthorizationType.OPENID_CONNECT`)\n- AWS Identity and Access Management (`AuthorizationType.AWS_IAM`)\n- AWS Lambda (`AuthorizationType.AWS_LAMBDA`)\n\nThese types can be used simultaneously in a single API, allowing different types of clients to\naccess data. When you specify an authorization type, you can also specify the corresponding\nauthorization mode to finish defining your authorization. For example, this is a GraphQL API\nwith AWS Lambda Authorization.\n\n```ts\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});\n```\n\n## Permissions\n\nWhen using `AWS_IAM` as the authorization type for GraphQL API, an IAM Role\nwith correct permissions must be used for access to API.\n\nWhen configuring permissions, you can specify specific resources to only be\naccessible by `IAM` authorization. For example, if you want to only allow mutability\nfor `IAM` authorized access you would configure the following.\n\nIn `schema.graphql`:\n\n```gql\ntype Mutation {\n  updateExample(...): ...\n    @aws_iam\n}\n```\n\nIn `IAM`:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"appsync:GraphQL\"\n      ],\n      \"Resource\": [\n        \"arn:aws:appsync:REGION:ACCOUNT_ID:apis/GRAPHQL_ID/types/Mutation/fields/updateExample\"\n      ]\n    }\n  ]\n}\n```\n\nSee [documentation](https://docs.aws.amazon.com/appsync/latest/devguide/security.html#aws-iam-authorization) for more details.\n\nTo make this easier, CDK provides `grant` API.\n\nUse the `grant` function for more granular authorization.\n\n```ts\nconst role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');\n```\n\n### IamResource\n\nIn order to use the `grant` functions, you need to use the class `IamResource`.\n\n- `IamResource.custom(...arns)` permits custom ARNs and requires an argument.\n\n- `IamResouce.ofType(type, ...fields)` permits ARNs for types and their fields.\n\n- `IamResource.all()` permits ALL resources.\n\n### Generic Permissions\n\nAlternatively, you can use more generic `grant` functions to accomplish the same usage.\n\nThese include:\n\n- grantMutation (use to grant access to Mutation fields)\n- grantQuery (use to grant access to Query fields)\n- grantSubscription (use to grant access to Subscription fields)\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const role: iam.Role;\n\n// For generic types\napi.grantMutation(role, 'updateExample');\n\n// For custom types and granular design\napi.grant(role, appsync.IamResource.ofType('Mutation', 'updateExample'), 'appsync:GraphQL');\n```\n\n## Pipeline Resolvers and AppSync Functions\n\nAppSync Functions are local functions that perform certain operations onto a\nbackend data source. Developers can compose operations (Functions) and execute\nthem in sequence with Pipeline Resolvers.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});\n```\n\nAppSync Functions are used in tandem with pipeline resolvers to compose multiple\noperations.\n\n```ts\ndeclare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});\n```\n\nLearn more about Pipeline Resolvers and AppSync Functions [here](https://docs.aws.amazon.com/appsync/latest/devguide/pipeline-resolvers.html).\n"
  },
  "repository": {
    "directory": "packages/individual-packages/aws-appsync",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.AppSync.Alpha",
      "packageId": "Amazon.CDK.AWS.AppSync.Alpha"
    },
    "go": {
      "moduleName": "github.com/aws/aws-cdk-go",
      "packageName": "awscdkappsyncalpha"
    },
    "java": {
      "maven": {
        "artifactId": "appsync-alpha",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.appsync.alpha"
    },
    "js": {
      "npm": "@aws-cdk/aws-appsync-alpha"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 2"
      ],
      "distName": "aws-cdk.aws-appsync-alpha",
      "module": "aws_cdk.aws_appsync_alpha"
    }
  },
  "types": {
    "@aws-cdk/aws-appsync-alpha.ApiKeyConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration for API Key authorization in AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const expiration: cdk.Expiration;\nconst apiKeyConfig: appsync_alpha.ApiKeyConfig = {\n  description: 'description',\n  expires: expiration,\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ApiKeyConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 111
      },
      "name": "ApiKeyConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- 'Default API Key created by CDK'",
            "stability": "experimental",
            "summary": "Description of API key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 121
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 7 days rounded down to nearest hour",
            "remarks": "It must be a minimum of 1 day and a maximum of 365 days from date of creation.\nRounded down to the nearest hour.",
            "stability": "experimental",
            "summary": "The time from creation time after which the API key expires."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 130
          },
          "name": "expires",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Expiration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'DefaultAPIKey'",
            "stability": "experimental",
            "summary": "Unique name of the API Key."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 116
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:ApiKeyConfig"
    },
    "@aws-cdk/aws-appsync-alpha.AppsyncFunction": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::AppSync::FunctionConfiguration",
          "exampleMetadata": "infused"
        },
        "remarks": "Developers can compose operations (Functions)\nand execute them in sequence with Pipeline Resolvers.",
        "stability": "experimental",
        "summary": "AppSync Functions are local functions that perform certain operations onto a backend data source.",
        "example": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});"
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/appsync-function.ts",
          "line": 129
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.IAppsyncFunction"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 85
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import Appsync Function from arn."
          },
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 89
          },
          "name": "fromAppsyncFunctionAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunctionAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.IAppsyncFunction"
            }
          },
          "static": true
        }
      ],
      "name": "AppsyncFunction",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "DataSourceName"
            },
            "stability": "experimental",
            "summary": "the data source of this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 125
          },
          "name": "dataSource",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSource"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ARN of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 113
          },
          "name": "functionArn",
          "overrides": "@aws-cdk/aws-appsync-alpha.IAppsyncFunction",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ID of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 119
          },
          "name": "functionId",
          "overrides": "@aws-cdk/aws-appsync-alpha.IAppsyncFunction",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "Name"
            },
            "stability": "experimental",
            "summary": "the name of this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 107
          },
          "name": "functionName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync-function:AppsyncFunction"
    },
    "@aws-cdk/aws-appsync-alpha.AppsyncFunctionAttributes": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The attributes for imported AppSync Functions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst appsyncFunctionAttributes: appsync_alpha.AppsyncFunctionAttributes = {\n  functionArn: 'functionArn',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunctionAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 53
      },
      "name": "AppsyncFunctionAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 57
          },
          "name": "functionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync-function:AppsyncFunctionAttributes"
    },
    "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "the CDK properties for AppSync Functions.",
        "example": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunctionProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BaseAppsyncFunctionProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 39
      },
      "name": "AppsyncFunctionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the GraphQL Api linked to this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 43
          },
          "name": "api",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the data source linked to this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 47
          },
          "name": "dataSource",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSource"
          }
        }
      ],
      "symbolId": "lib/appsync-function:AppsyncFunctionProps"
    },
    "@aws-cdk/aws-appsync-alpha.Assign": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class representing the assigment of a value to an attribute.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst assign = new appsync_alpha.Assign('attr', 'arg');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.Assign",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 86
        },
        "parameters": [
          {
            "name": "attr",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "arg",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 85
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the assignment as a map element."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 98
          },
          "name": "putInMap",
          "parameters": [
            {
              "name": "map",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the assignment as a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 91
          },
          "name": "renderAsAssignment",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "Assign",
      "symbolId": "lib/key:Assign"
    },
    "@aws-cdk/aws-appsync-alpha.AttributeValues": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Specifies the attribute value assignments.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValues",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 196
        },
        "parameters": [
          {
            "name": "container",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "assignments",
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 195
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the specified attribute."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 201
          },
          "name": "attribute",
          "parameters": [
            {
              "name": "attr",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValuesStep"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the attribute value assingments to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 216
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the variables required for `renderTemplate`."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 208
          },
          "name": "renderVariables",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "AttributeValues",
      "symbolId": "lib/key:AttributeValues"
    },
    "@aws-cdk/aws-appsync-alpha.AttributeValuesStep": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to allow assigning a value to an attribute.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\nconst attributeValuesStep = new appsync_alpha.AttributeValuesStep('attr', 'container', [assign]);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValuesStep",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 225
        },
        "parameters": [
          {
            "name": "attr",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "container",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "assignments",
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
                },
                "kind": "array"
              }
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 224
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign the value to the current attribute."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 230
          },
          "name": "is",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValues"
            }
          }
        }
      ],
      "name": "AttributeValuesStep",
      "symbolId": "lib/key:AttributeValuesStep"
    },
    "@aws-cdk/aws-appsync-alpha.AuthorizationConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration of the API authorization modes.",
        "example": "import * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 192
      },
      "name": "AuthorizationConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No other modes",
            "stability": "experimental",
            "summary": "Additional authorization modes."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 205
          },
          "name": "additionalAuthorizationModes",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationMode"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- API Key authorization",
            "stability": "experimental",
            "summary": "Optional authorization configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 198
          },
          "name": "defaultAuthorization",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationMode"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:AuthorizationConfig"
    },
    "@aws-cdk/aws-appsync-alpha.AuthorizationMode": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Interface to specify default or additional authorization(s).",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationMode",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 41
      },
      "name": "AuthorizationMode",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- `AuthorizationType.API_KEY`",
            "see": "https://docs.aws.amazon.com/appsync/latest/devguide/security.html",
            "stability": "experimental",
            "summary": "One of possible four values AppSync supports."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 49
          },
          "name": "authorizationType",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- name: 'DefaultAPIKey' | description: 'Default API Key created by CDK'",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.API_KEY`, this option can be configured."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 59
          },
          "name": "apiKeyConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.ApiKeyConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.LAMBDA`, this option is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 69
          },
          "name": "lambdaAuthorizerConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.LambdaAuthorizerConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.OIDC`, this option is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 64
          },
          "name": "openIdConnectConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.OpenIdConnectConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "If authorizationType is `AuthorizationType.USER_POOL`, this option is required."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 54
          },
          "name": "userPoolConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.UserPoolConfig"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:AuthorizationMode"
    },
    "@aws-cdk/aws-appsync-alpha.AuthorizationType": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "enum with all possible values for AppSync authorization type.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 15
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "API Key authorization type."
          },
          "name": "API_KEY"
        },
        {
          "docs": {
            "remarks": "Can be used with Cognito Identity Pool federated credentials",
            "stability": "experimental",
            "summary": "AWS IAM authorization type."
          },
          "name": "IAM"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Cognito User Pool authorization type."
          },
          "name": "USER_POOL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "OpenID Connect authorization type."
          },
          "name": "OIDC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Lambda authorization type."
          },
          "name": "LAMBDA"
        }
      ],
      "name": "AuthorizationType",
      "symbolId": "lib/graphqlapi:AuthorizationType"
    },
    "@aws-cdk/aws-appsync-alpha.AwsIamConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The authorization config in case the HTTP endpoint requires authorization.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.AwsIamConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 234
      },
      "name": "AwsIamConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The signing region for AWS IAM authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 238
          },
          "name": "signingRegion",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The signing service name for AWS IAM authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 243
          },
          "name": "signingServiceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/data-source:AwsIamConfig"
    },
    "@aws-cdk/aws-appsync-alpha.BackedDataSource": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BaseDataSource",
      "docs": {
        "remarks": "Do not use directly but use subclasses for resource backed datasources",
        "stability": "experimental",
        "summary": "Abstract AppSync datasource implementation."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 164
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
            }
          },
          {
            "name": "extended",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedDataSourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "aws-cdk-lib.aws_iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 158
      },
      "name": "BackedDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the principal of the data source to be IGrantable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 162
          },
          "name": "grantPrincipal",
          "overrides": "aws-cdk-lib.aws_iam.IGrantable",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IPrincipal"
          }
        }
      ],
      "symbolId": "lib/data-source:BackedDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "properties for an AppSync datasource backed by a resource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst backedDataSourceProps: appsync_alpha.BackedDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 40
      },
      "name": "BackedDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "-  Create a new role",
            "stability": "experimental",
            "summary": "The IAM service role to be assumed by AppSync to interact with the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 46
          },
          "name": "serviceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/data-source:BackedDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.BaseAppsyncFunctionProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "the base properties for AppSync Functions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const mappingTemplate: appsync_alpha.MappingTemplate;\nconst baseAppsyncFunctionProps: appsync_alpha.BaseAppsyncFunctionProps = {\n  name: 'name',\n\n  // the properties below are optional\n  description: 'description',\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.BaseAppsyncFunctionProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 11
      },
      "name": "BaseAppsyncFunctionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the name of the AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 15
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no description",
            "stability": "experimental",
            "summary": "the description for this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 21
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no request mapping template",
            "stability": "experimental",
            "summary": "the request mapping template for the AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 27
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no response mapping template",
            "stability": "experimental",
            "summary": "the response mapping template for the AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 33
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
          }
        }
      ],
      "symbolId": "lib/appsync-function:BaseAppsyncFunctionProps"
    },
    "@aws-cdk/aws-appsync-alpha.BaseDataSource": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "constructs.Construct",
      "docs": {
        "remarks": "Do not use directly but use subclasses for concrete datasources",
        "stability": "experimental",
        "summary": "Abstract AppSync datasource implementation.",
        "example": "declare const api: appsync.GraphqlApi;\n\nconst appsyncFunction = new appsync.AppsyncFunction(this, 'function', {\n  name: 'appsync_function',\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 112
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
            }
          },
          {
            "name": "extended",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 99
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "creates a new appsync function for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 146
          },
          "name": "createFunction",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.BaseAppsyncFunctionProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.AppsyncFunction"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "creates a new resolver for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 135
          },
          "name": "createResolver",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.BaseResolverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Resolver"
            }
          }
        }
      ],
      "name": "BaseDataSource",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the underlying CFN data source resource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 107
          },
          "name": "ds",
          "type": {
            "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 103
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 109
          },
          "name": "api",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 110
          },
          "name": "serviceRole",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/data-source:BaseDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Base properties for an AppSync datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst baseDataSourceProps: appsync_alpha.BaseDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 18
      },
      "name": "BaseDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The API to attach this data source to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 22
          },
          "name": "api",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "the description of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 34
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- id of data source",
            "stability": "experimental",
            "summary": "The name of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 28
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/data-source:BaseDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.BaseResolverProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Basic properties for an AppSync resolver.",
        "example": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver('QueryGetDemosRdsResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver('MutationAddDemoRdsResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.BaseResolverProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 14
      },
      "name": "BaseResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "name of the GraphQL field in the given type this resolver is attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 22
          },
          "name": "fieldName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "name of the GraphQL type this resolver is attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 18
          },
          "name": "typeName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No caching configuration",
            "stability": "experimental",
            "summary": "The caching configuration for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 47
          },
          "name": "cachingConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.CachingConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No max batch size",
            "stability": "experimental",
            "summary": "The maximum number of elements per batch, when using batch invoke."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 53
          },
          "name": "maxBatchSize",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no pipeline resolver configuration\nAn empty array | undefined sets resolver to be of kind, unit",
            "stability": "experimental",
            "summary": "configuration of the pipeline resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 29
          },
          "name": "pipelineConfig",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync-alpha.IAppsyncFunction"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No mapping template",
            "stability": "experimental",
            "summary": "The request mapping template for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 35
          },
          "name": "requestMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No mapping template",
            "stability": "experimental",
            "summary": "The response mapping template for this resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 41
          },
          "name": "responseMappingTemplate",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
          }
        }
      ],
      "symbolId": "lib/resolver:BaseResolverProps"
    },
    "@aws-cdk/aws-appsync-alpha.CachingConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "CachingConfig for AppSync resolvers.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\nconst cachingConfig: appsync_alpha.CachingConfig = {\n  ttl: cdk.Duration.minutes(30),\n\n  // the properties below are optional\n  cachingKeys: ['cachingKeys'],\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.CachingConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/caching-config.ts",
        "line": 6
      },
      "name": "CachingConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Valid values are between 1 and 3600 seconds.",
            "stability": "experimental",
            "summary": "The TTL in seconds for a resolver that has caching enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/caching-config.ts",
            "line": 20
          },
          "name": "ttl",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No caching keys",
            "remarks": "Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.",
            "stability": "experimental",
            "summary": "The caching keys for a resolver that has caching enabled."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/caching-config.ts",
            "line": 13
          },
          "name": "cachingKeys",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/caching-config:CachingConfig"
    },
    "@aws-cdk/aws-appsync-alpha.DataSourceOptions": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Optional configuration for data sources.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst dataSourceOptions: appsync_alpha.DataSourceOptions = {\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 14
      },
      "name": "DataSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No description",
            "stability": "experimental",
            "summary": "The description of the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 27
          },
          "name": "description",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generated by cdk given the id",
            "stability": "experimental",
            "summary": "The name of the data source, overrides the id given by cdk."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 20
          },
          "name": "name",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:DataSourceOptions"
    },
    "@aws-cdk/aws-appsync-alpha.DomainOptions": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Domain name configuration for AppSync.",
        "example": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst schema = new appsync.SchemaFile({ filePath: 'mySchemaFile' })\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: api.appSyncDomainName,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.DomainOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 264
      },
      "name": "DomainOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The certificate to use with the domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 268
          },
          "name": "certificate",
          "type": {
            "fqn": "aws-cdk-lib.aws_certificatemanager.ICertificate"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "For example, `api.example.com`.",
            "stability": "experimental",
            "summary": "The actual domain name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 273
          },
          "name": "domainName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:DomainOptions"
    },
    "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by a DynamoDB table.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 214
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 213
      },
      "name": "DynamoDbDataSource",
      "symbolId": "lib/data-source:DynamoDbDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.DynamoDbDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync DynamoDB datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_dynamodb as dynamodb } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const table: dynamodb.Table;\nconst dynamoDbDataSourceProps: appsync_alpha.DynamoDbDataSourceProps = {\n  api: graphqlApi,\n  table: table,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  readOnlyAccess: false,\n  serviceRole: role,\n  useCallerCredentials: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 191
      },
      "name": "DynamoDbDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The DynamoDB table backing this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 195
          },
          "name": "table",
          "type": {
            "fqn": "aws-cdk-lib.aws_dynamodb.ITable"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Specify whether this DS is read only or has read and write permissions to the DynamoDB table."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 201
          },
          "name": "readOnlyAccess",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "use credentials of caller to access DynamoDB."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 207
          },
          "name": "useCallerCredentials",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/data-source:DynamoDbDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "docs": {
        "deprecated": "- use `OpenSearchDataSource`",
        "stability": "deprecated",
        "summary": "An Appsync datasource backed by Elasticsearch.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_elasticsearch as elasticsearch } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSource = new appsync_alpha.ElasticsearchDataSource(this, 'MyElasticsearchDataSource', {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSource",
      "initializer": {
        "docs": {
          "stability": "deprecated"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 395
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 394
      },
      "name": "ElasticsearchDataSource",
      "symbolId": "lib/data-source:ElasticsearchDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "deprecated": "- use `OpenSearchDataSourceProps` with `OpenSearchDataSource`",
        "stability": "deprecated",
        "summary": "Properties for the Elasticsearch Data Source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_elasticsearch as elasticsearch } from 'aws-cdk-lib';\nimport { aws_iam as iam } from 'aws-cdk-lib';\n\ndeclare const domain: elasticsearch.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst elasticsearchDataSourceProps: appsync_alpha.ElasticsearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 382
      },
      "name": "ElasticsearchDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "deprecated",
            "summary": "The elasticsearch domain containing the endpoint for the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 386
          },
          "name": "domain",
          "type": {
            "fqn": "aws-cdk-lib.aws_elasticsearch.IDomain"
          }
        }
      ],
      "symbolId": "lib/data-source:ElasticsearchDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.ExtendedDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "remarks": "Should not be used directly.",
        "stability": "experimental",
        "summary": "props used by implementations of BaseDataSource to provide configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst extendedDataSourceProps: appsync_alpha.ExtendedDataSourceProps = {\n  type: 'type',\n\n  // the properties below are optional\n  dynamoDbConfig: {\n    awsRegion: 'awsRegion',\n    tableName: 'tableName',\n\n    // the properties below are optional\n    deltaSyncConfig: {\n      baseTableTtl: 'baseTableTtl',\n      deltaSyncTableName: 'deltaSyncTableName',\n      deltaSyncTableTtl: 'deltaSyncTableTtl',\n    },\n    useCallerCredentials: false,\n    versioned: false,\n  },\n  elasticsearchConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  httpConfig: {\n    endpoint: 'endpoint',\n\n    // the properties below are optional\n    authorizationConfig: {\n      authorizationType: 'authorizationType',\n\n      // the properties below are optional\n      awsIamConfig: {\n        signingRegion: 'signingRegion',\n        signingServiceName: 'signingServiceName',\n      },\n    },\n  },\n  lambdaConfig: {\n    lambdaFunctionArn: 'lambdaFunctionArn',\n  },\n  openSearchServiceConfig: {\n    awsRegion: 'awsRegion',\n    endpoint: 'endpoint',\n  },\n  relationalDatabaseConfig: {\n    relationalDatabaseSourceType: 'relationalDatabaseSourceType',\n\n    // the properties below are optional\n    rdsHttpEndpointConfig: {\n      awsRegion: 'awsRegion',\n      awsSecretStoreArn: 'awsSecretStoreArn',\n      dbClusterIdentifier: 'dbClusterIdentifier',\n\n      // the properties below are optional\n      databaseName: 'databaseName',\n      schema: 'schema',\n    },\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedDataSourceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 52
      },
      "name": "ExtendedDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the type of the AppSync datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 56
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for DynamoDB Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 62
          },
          "name": "dynamoDbConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource.DynamoDBConfigProperty"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "deprecated": "- use `openSearchConfig`",
            "stability": "deprecated",
            "summary": "configuration for Elasticsearch data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 69
          },
          "name": "elasticsearchConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource.ElasticsearchConfigProperty"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for HTTP Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 81
          },
          "name": "httpConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource.HttpConfigProperty"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for Lambda Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 87
          },
          "name": "lambdaConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource.LambdaConfigProperty"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for OpenSearch data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 75
          },
          "name": "openSearchServiceConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource.OpenSearchServiceConfigProperty"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No config",
            "stability": "experimental",
            "summary": "configuration for RDS Datasource."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 93
          },
          "name": "relationalDatabaseConfig",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "fqn": "aws-cdk-lib.aws_appsync.CfnDataSource.RelationalDatabaseConfigProperty"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        }
      ],
      "symbolId": "lib/data-source:ExtendedDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional property for an AppSync resolver for data source reference.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport * as cdk from 'aws-cdk-lib';\n\ndeclare const appsyncFunction: appsync_alpha.AppsyncFunction;\ndeclare const baseDataSource: appsync_alpha.BaseDataSource;\ndeclare const mappingTemplate: appsync_alpha.MappingTemplate;\nconst extendedResolverProps: appsync_alpha.ExtendedResolverProps = {\n  fieldName: 'fieldName',\n  typeName: 'typeName',\n\n  // the properties below are optional\n  cachingConfig: {\n    ttl: cdk.Duration.minutes(30),\n\n    // the properties below are optional\n    cachingKeys: ['cachingKeys'],\n  },\n  dataSource: baseDataSource,\n  maxBatchSize: 123,\n  pipelineConfig: [appsyncFunction],\n  requestMappingTemplate: mappingTemplate,\n  responseMappingTemplate: mappingTemplate,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BaseResolverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 59
      },
      "name": "ExtendedResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- No datasource",
            "stability": "experimental",
            "summary": "The data source this resolver is using."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 65
          },
          "name": "dataSource",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.BaseDataSource"
          }
        }
      ],
      "symbolId": "lib/resolver:ExtendedResolverProps"
    },
    "@aws-cdk/aws-appsync-alpha.FieldLogLevel": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "log-level for fields in AppSync."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.FieldLogLevel",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 211
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "No logging."
          },
          "name": "NONE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Error logging."
          },
          "name": "ERROR"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "All logging."
          },
          "name": "ALL"
        }
      ],
      "name": "FieldLogLevel",
      "symbolId": "lib/graphqlapi:FieldLogLevel"
    },
    "@aws-cdk/aws-appsync-alpha.GraphqlApi": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.GraphqlApiBase",
      "docs": {
        "custom": {
          "resource": "AWS::AppSync::GraphQLApi",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "An AppSync GraphQL API.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});"
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApi",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/graphqlapi.ts",
          "line": 480
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 407
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import a GraphQL API through this function."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 415
          },
          "name": "fromGraphqlApiAttributes",
          "parameters": [
            {
              "docs": {
                "summary": "scope."
              },
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "docs": {
                "summary": "id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "GraphQL API Attributes of an API."
              },
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add schema dependency to a given construct."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 633
          },
          "name": "addSchemaDependency",
          "overrides": "@aws-cdk/aws-appsync-alpha.GraphqlApiBase",
          "parameters": [
            {
              "docs": {
                "summary": "the dependee."
              },
              "name": "construct",
              "type": {
                "fqn": "aws-cdk-lib.CfnResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement associated with this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 563
          },
          "name": "grant",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The set of resources to allow (i.e. ...:[region]:[accountId]:apis/GraphQLId/...)."
              },
              "name": "resources",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.IamResource"
              }
            },
            {
              "docs": {
                "summary": "The actions that should be granted to the principal (i.e. appsync:graphql )."
              },
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement for Mutation access to this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 579
          },
          "name": "grantMutation",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The fields to grant access to that are Mutations (leave blank for all)."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement for Query access to this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 590
          },
          "name": "grantQuery",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The fields to grant access to that are Queries (leave blank for all)."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.Grant"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds an IAM policy statement for Subscription access to this GraphQLApi to an IAM principal's policy."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 601
          },
          "name": "grantSubscription",
          "parameters": [
            {
              "docs": {
                "summary": "The principal."
              },
              "name": "grantee",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            },
            {
              "docs": {
                "summary": "The fields to grant access to that are Subscriptions (leave blank for all)."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.Grant"
            }
          },
          "variadic": true
        }
      ],
      "name": "GraphqlApi",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 434
          },
          "name": "apiId",
          "overrides": "@aws-cdk/aws-appsync-alpha.GraphqlApiBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The AppSyncDomainName of the associated custom domain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 710
          },
          "name": "appSyncDomainName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 439
          },
          "name": "arn",
          "overrides": "@aws-cdk/aws-appsync-alpha.GraphqlApiBase",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "GraphQlUrl"
            },
            "stability": "experimental",
            "summary": "the URL of the endpoint created by AppSync."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 446
          },
          "name": "graphqlUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the CloudWatch Log Group for this API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 473
          },
          "name": "logGroup",
          "type": {
            "fqn": "aws-cdk-lib.aws_logs.ILogGroup"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Authorization Types for this GraphQL Api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 461
          },
          "name": "modes",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationType"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the name of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 451
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "the schema attached to this api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 456
          },
          "name": "schema",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.ISchema"
          }
        },
        {
          "docs": {
            "default": "- no api key",
            "stability": "experimental",
            "summary": "the configured API key, if present."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 468
          },
          "name": "apiKey",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:GraphqlApi"
    },
    "@aws-cdk/aws-appsync-alpha.GraphqlApiAttributes": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for GraphQL imports.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const table: dynamodb.Table;\nconst importedApi = appsync.GraphqlApi.fromGraphqlApiAttributes(this, 'IApi', {\n  graphqlApiId: api.apiId,\n  graphqlApiArn: api.arn,\n});\nimportedApi.addDynamoDbDataSource('TableDataSource', table);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 388
      },
      "name": "GraphqlApiAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 393
          },
          "name": "graphqlApiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- autogenerated arn",
            "stability": "experimental",
            "summary": "the arn for the GraphQL Api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 399
          },
          "name": "graphqlApiArn",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:GraphqlApiAttributes"
    },
    "@aws-cdk/aws-appsync-alpha.GraphqlApiBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "Base Class for GraphQL API."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiBase",
      "initializer": {
        "docs": {
          "stability": "stable"
        },
        "locationInModule": {
          "filename": "core/lib/resource.ts",
          "line": 156
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "aws-cdk-lib.ResourceProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 150
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new DynamoDB data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 185
          },
          "name": "addDynamoDbDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The DynamoDB table backing this data source."
              },
              "name": "table",
              "type": {
                "fqn": "aws-cdk-lib.aws_dynamodb.ITable"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource"
            }
          }
        },
        {
          "docs": {
            "deprecated": "- use `addOpenSearchDataSource`",
            "stability": "deprecated",
            "summary": "add a new elasticsearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 260
          },
          "name": "addElasticsearchDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The elasticsearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "aws-cdk-lib.aws_elasticsearch.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new http data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 201
          },
          "name": "addHttpDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The http endpoint."
              },
              "name": "endpoint",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new Lambda data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 218
          },
          "name": "addLambdaDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The Lambda function to call to interact with this data source."
              },
              "name": "lambdaFunction",
              "type": {
                "fqn": "aws-cdk-lib.aws_lambda.IFunction"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSource"
            }
          }
        },
        {
          "docs": {
            "remarks": "Useful for pipeline resolvers\nand for backend changes that don't require a data source.",
            "stability": "experimental",
            "summary": "add a new dummy data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 170
          },
          "name": "addNoneDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new OpenSearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 276
          },
          "name": "addOpenSearchDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The OpenSearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "aws-cdk-lib.aws_opensearchservice.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "add a new Rds data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 235
          },
          "name": "addRdsDataSource",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The serverless cluster to interact with this data source."
              },
              "name": "serverlessCluster",
              "type": {
                "fqn": "aws-cdk-lib.aws_rds.IServerlessCluster"
              }
            },
            {
              "docs": {
                "summary": "The secret store that contains the username and password for the serverless cluster."
              },
              "name": "secretStore",
              "type": {
                "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "The optional name of the database to use within the cluster."
              },
              "name": "databaseName",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSource"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add schema dependency if not imported."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 300
          },
          "name": "addSchemaDependency",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "docs": {
                "summary": "the dependee."
              },
              "name": "construct",
              "type": {
                "fqn": "aws-cdk-lib.CfnResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "creates a new resolver for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 288
          },
          "name": "createResolver",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Resolver"
            }
          }
        }
      ],
      "name": "GraphqlApiBase",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 156
          },
          "name": "apiId",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 161
          },
          "name": "arn",
          "overrides": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:GraphqlApiBase"
    },
    "@aws-cdk/aws-appsync-alpha.GraphqlApiProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync GraphQL API.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApiProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 279
      },
      "name": "GraphqlApiProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "the name of the GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 283
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- schema will be generated code-first (i.e. addType, addObjectType, etc.)",
            "remarks": "Schema.fromFile(filePath: string) allows schema definition through schema.graphql file",
            "stability": "experimental",
            "summary": "GraphQL schema definition. Specify how you want to define your schema."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 307
          },
          "name": "schema",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.ISchema"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- API Key authorization",
            "stability": "experimental",
            "summary": "Optional authorization configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 290
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.AuthorizationConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no domain name",
            "remarks": "The Route 53 hosted zone and CName DNS record must be configured in addition to this setting to\nenable custom domain URL",
            "stability": "experimental",
            "summary": "The domain name configuration for the GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 323
          },
          "name": "domainName",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.DomainOptions"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "Logging configuration for this api."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 297
          },
          "name": "logConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.LogConfig"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "A flag indicating whether or not X-Ray tracing is enabled for the GraphQL API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 313
          },
          "name": "xrayEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:GraphqlApiProps"
    },
    "@aws-cdk/aws-appsync-alpha.HttpDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by a http endpoint.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 268
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 267
      },
      "name": "HttpDataSource",
      "symbolId": "lib/data-source:HttpDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Optional configuration for Http data sources.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 33
      },
      "name": "HttpDataSourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The authorization config in case the HTTP endpoint requires authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 39
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.AwsIamConfig"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:HttpDataSourceOptions"
    },
    "@aws-cdk/aws-appsync-alpha.HttpDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync http datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst httpDataSourceProps: appsync_alpha.HttpDataSourceProps = {\n  api: graphqlApi,\n  endpoint: 'endpoint',\n\n  // the properties below are optional\n  authorizationConfig: {\n    signingRegion: 'signingRegion',\n    signingServiceName: 'signingServiceName',\n  },\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 249
      },
      "name": "HttpDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The http endpoint."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 253
          },
          "name": "endpoint",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- none",
            "stability": "experimental",
            "summary": "The authorization config in case the HTTP endpoint requires authorization."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 261
          },
          "name": "authorizationConfig",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.AwsIamConfig"
          }
        }
      ],
      "symbolId": "lib/data-source:HttpDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.IAppsyncFunction": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for AppSync Functions."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.IAppsyncFunction",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/appsync-function.ts",
        "line": 63
      },
      "name": "IAppsyncFunction",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ARN of the AppSync function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 75
          },
          "name": "functionArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the name of this AppSync Function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/appsync-function.ts",
            "line": 69
          },
          "name": "functionId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/appsync-function:IAppsyncFunction"
    },
    "@aws-cdk/aws-appsync-alpha.IGraphqlApi": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for GraphQL."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi-base.ts",
        "line": 45
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new DynamoDB data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 78
          },
          "name": "addDynamoDbDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The DynamoDB table backing this data source."
              },
              "name": "table",
              "type": {
                "fqn": "aws-cdk-lib.aws_dynamodb.ITable"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.DynamoDbDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "deprecated": "- use `addOpenSearchDataSource`",
            "stability": "deprecated",
            "summary": "add a new elasticsearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 123
          },
          "name": "addElasticsearchDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The elasticsearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "aws-cdk-lib.aws_elasticsearch.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ElasticsearchDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new http data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 87
          },
          "name": "addHttpDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The http endpoint."
              },
              "name": "endpoint",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.HttpDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new Lambda data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 96
          },
          "name": "addLambdaDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The Lambda function to call to interact with this data source."
              },
              "name": "lambdaFunction",
              "type": {
                "fqn": "aws-cdk-lib.aws_lambda.IFunction"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Useful for pipeline resolvers\nand for backend changes that don't require a data source.",
            "stability": "experimental",
            "summary": "add a new dummy data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 69
          },
          "name": "addNoneDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add a new OpenSearch data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 132
          },
          "name": "addOpenSearchDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The OpenSearch domain for this data source."
              },
              "name": "domain",
              "type": {
                "fqn": "aws-cdk-lib.aws_opensearchservice.IDomain"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "add a new Rds data source to this API."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 107
          },
          "name": "addRdsDataSource",
          "parameters": [
            {
              "docs": {
                "summary": "The data source's id."
              },
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The serverless cluster to interact with this data source."
              },
              "name": "serverlessCluster",
              "type": {
                "fqn": "aws-cdk-lib.aws_rds.IServerlessCluster"
              }
            },
            {
              "docs": {
                "summary": "The secret store that contains the username and password for the serverless cluster."
              },
              "name": "secretStore",
              "type": {
                "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "The optional name of the database to use within the cluster."
              },
              "name": "databaseName",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "The optional configuration for this data source."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.DataSourceOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSource"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Add schema dependency if not imported."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 144
          },
          "name": "addSchemaDependency",
          "parameters": [
            {
              "docs": {
                "summary": "the dependee."
              },
              "name": "construct",
              "type": {
                "fqn": "aws-cdk-lib.CfnResource"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "creates a new resolver for this datasource and API using the given properties."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 137
          },
          "name": "createResolver",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Resolver"
            }
          }
        }
      ],
      "name": "IGraphqlApi",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "an unique AWS AppSync GraphQL API identifier i.e. 'lxz775lwdrgcndgz3nurvac7oa'."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 53
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "the ARN of the API."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi-base.ts",
            "line": 60
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi-base:IGraphqlApi"
    },
    "@aws-cdk/aws-appsync-alpha.ISchema": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "remarks": "Useful for providing schema's from sources other than assets",
        "stability": "experimental",
        "summary": "Interface for implementing your own schema."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ISchema",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 34
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "ISchemaConfig with apiId and schema definition string",
            "stability": "experimental",
            "summary": "Binds a schema string to a GraphQlApi."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 42
          },
          "name": "bind",
          "parameters": [
            {
              "docs": {
                "summary": "the api to bind the schema to."
              },
              "name": "api",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
              }
            },
            {
              "docs": {
                "summary": "configuration for bind behavior."
              },
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.SchemaBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ISchemaConfig"
            }
          }
        }
      ],
      "name": "ISchema",
      "symbolId": "lib/schema:ISchema"
    },
    "@aws-cdk/aws-appsync-alpha.ISchemaConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "remarks": "Returned from ISchema.bind allowing late binding of schemas to graphqlapi-base",
        "stability": "experimental",
        "summary": "Configuration for bound graphql schema."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ISchemaConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 9
      },
      "name": "ISchemaConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ID of the api the schema is bound to."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 13
          },
          "name": "apiId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The schema definition string."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 18
          },
          "name": "definition",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/schema:ISchemaConfig"
    },
    "@aws-cdk/aws-appsync-alpha.IamResource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A class used to generate resource arns for AppSync.",
        "example": "const role = new iam.Role(this, 'Role', {\n  assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n});\ndeclare const api: appsync.GraphqlApi;\n\napi.grant(role, appsync.IamResource.custom('types/Mutation/fields/updateExample'), 'appsync:GraphQL');",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.IamResource",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 329
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resource names that accepts all types: `*`."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 360
          },
          "name": "all",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.IamResource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resource names given custom arns."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 337
          },
          "name": "custom",
          "parameters": [
            {
              "docs": {
                "remarks": "Example: custom('/types/Query/fields/getExample')",
                "summary": "The custom arns that need to be permissioned."
              },
              "name": "arns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.IamResource"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Generate the resource names given a type and fields."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 352
          },
          "name": "ofType",
          "parameters": [
            {
              "docs": {
                "summary": "The type that needs to be allowed."
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "remarks": "Example: ofType('Query', 'GetExample')",
                "summary": "The fields that need to be allowed, if empty grant permissions to ALL fields."
              },
              "name": "fields",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.IamResource"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Resource ARN."
          },
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 375
          },
          "name": "resourceArns",
          "parameters": [
            {
              "docs": {
                "summary": "The GraphQL API to give permissions."
              },
              "name": "api",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.GraphqlApi"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "IamResource",
      "symbolId": "lib/graphqlapi:IamResource"
    },
    "@aws-cdk/aws-appsync-alpha.KeyCondition": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Factory class for DynamoDB key conditions.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst keyCondition = appsync_alpha.KeyCondition.beginsWith('keyName', 'arg');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "remarks": "True if the key attribute k begins with the Query argument.",
            "stability": "experimental",
            "summary": "Condition (k, arg)."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 46
          },
          "name": "beginsWith",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k BETWEEN arg1 AND arg2, true if k >= arg1 and k <= arg2."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 53
          },
          "name": "between",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg2",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k = arg, true if the key attribute k is equal to the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 11
          },
          "name": "eq",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k >= arg, true if the key attribute k is greater or equal to the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 39
          },
          "name": "ge",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k > arg, true if the key attribute k is greater than the the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 32
          },
          "name": "gt",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k <= arg, true if the key attribute k is less than or equal to the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 25
          },
          "name": "le",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Condition k < arg, true if the key attribute k is less than the Query argument."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 18
          },
          "name": "lt",
          "parameters": [
            {
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "arg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Conjunction between two conditions."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 62
          },
          "name": "and",
          "parameters": [
            {
              "name": "keyCond",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the key condition to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 69
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "KeyCondition",
      "symbolId": "lib/key:KeyCondition"
    },
    "@aws-cdk/aws-appsync-alpha.LambdaAuthorizerConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "remarks": "Note that you can only have a single AWS Lambda function configured to authorize your API.",
        "stability": "experimental",
        "summary": "Configuration for Lambda authorization in AppSync.",
        "example": "import * as lambda from 'aws-cdk-lib/aws-lambda';\ndeclare const authFunction: lambda.Function;\n\nnew appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'appsync.test.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.LAMBDA,\n      lambdaAuthorizerConfig: {\n        handler: authFunction,\n        // can also specify `resultsCacheTtl` and `validationRegex`.\n      },\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.LambdaAuthorizerConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 165
      },
      "name": "LambdaAuthorizerConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-graphqlapi-lambdaauthorizerconfig.html",
            "stability": "experimental",
            "summary": "The authorizer lambda function."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 171
          },
          "name": "handler",
          "type": {
            "fqn": "aws-cdk-lib.aws_lambda.IFunction"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.minutes(5)",
            "remarks": "Disable caching by setting this to 0.",
            "stability": "experimental",
            "summary": "How long the results are cached."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 179
          },
          "name": "resultsCacheTtl",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no regex filter will be applied.",
            "stability": "experimental",
            "summary": "A regular expression for validation of tokens before the Lambda function is called."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 186
          },
          "name": "validationRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:LambdaAuthorizerConfig"
    },
    "@aws-cdk/aws-appsync-alpha.LambdaDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by a Lambda function.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSource = new appsync_alpha.LambdaDataSource(this, 'MyLambdaDataSource', {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 297
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 296
      },
      "name": "LambdaDataSource",
      "symbolId": "lib/data-source:LambdaDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.LambdaDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync Lambda datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_lambda as lambda } from 'aws-cdk-lib';\n\ndeclare const function_: lambda.Function;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst lambdaDataSourceProps: appsync_alpha.LambdaDataSourceProps = {\n  api: graphqlApi,\n  lambdaFunction: function_,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.LambdaDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 286
      },
      "name": "LambdaDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Lambda function to call to interact with this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 290
          },
          "name": "lambdaFunction",
          "type": {
            "fqn": "aws-cdk-lib.aws_lambda.IFunction"
          }
        }
      ],
      "symbolId": "lib/data-source:LambdaDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.LogConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Logging configuration for AppSync.",
        "example": "import * as logs from 'aws-cdk-lib/aws-logs';\n\nconst logConfig: appsync.LogConfig = {\n  retention: logs.RetentionDays.ONE_WEEK,\n};\n\nnew appsync.GraphqlApi(this, 'api', {\n  authorizationConfig: {},\n  name: 'myApi',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'myApi.graphql')),\n  logConfig,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.LogConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 229
      },
      "name": "LogConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "exclude verbose content."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 235
          },
          "name": "excludeVerboseContent",
          "optional": true,
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "aws-cdk-lib.IResolvable"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Use AppSync default",
            "stability": "experimental",
            "summary": "log level for fields."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 241
          },
          "name": "fieldLogLevel",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.FieldLogLevel"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RetentionDays.INFINITE",
            "remarks": "By default AppSync keeps the logs infinitely. When updating this property,\nunsetting it doesn't remove the log retention policy.\nTo remove the retention policy, set the value to `INFINITE`",
            "stability": "experimental",
            "summary": "The number of days log events are kept in CloudWatch Logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 258
          },
          "name": "retention",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_logs.RetentionDays"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "The role for CloudWatch Logs."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 248
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:LogConfig"
    },
    "@aws-cdk/aws-appsync-alpha.MappingTemplate": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "MappingTemplates for AppSync resolvers.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/mapping-template.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to delete a single item from a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 68
          },
          "name": "dynamoDbDeleteItem",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the hash key field."
              },
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the name of the Mutation argument."
              },
              "name": "idArg",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to get a single item from a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 58
          },
          "name": "dynamoDbGetItem",
          "parameters": [
            {
              "docs": {
                "summary": "the name of the hash key field."
              },
              "name": "keyName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the name of the Query argument."
              },
              "name": "idArg",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "consistentRead",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to save a single item to a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 78
          },
          "name": "dynamoDbPutItem",
          "parameters": [
            {
              "docs": {
                "summary": "the assigment of Mutation values to the primary key."
              },
              "name": "key",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.PrimaryKey"
              }
            },
            {
              "docs": {
                "summary": "the assignment of Mutation values to the table attributes."
              },
              "name": "values",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValues"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to query a set of items from a DynamoDB table."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 48
          },
          "name": "dynamoDbQuery",
          "parameters": [
            {
              "docs": {
                "summary": "the key condition for the query."
              },
              "name": "cond",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.KeyCondition"
              }
            },
            {
              "name": "indexName",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "consistentRead",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template for a single result item from DynamoDB."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 32
          },
          "name": "dynamoDbResultItem",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template for a result list from DynamoDB."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 25
          },
          "name": "dynamoDbResultList",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to scan a DynamoDB table to fetch all entries."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 39
          },
          "name": "dynamoDbScanTable",
          "parameters": [
            {
              "name": "consistentRead",
              "optional": true,
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a mapping template from the given file."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 18
          },
          "name": "fromFile",
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Create a mapping template from the given string."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 11
          },
          "name": "fromString",
          "parameters": [
            {
              "name": "template",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to invoke a Lambda function."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 96
          },
          "name": "lambdaRequest",
          "parameters": [
            {
              "docs": {
                "remarks": "If no payload is provided all available context fields are sent to the Lambda function",
                "summary": "the VTL template snippet of the payload to send to the lambda."
              },
              "name": "payload",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "summary": "the type of operation AppSync should perform on the data source."
              },
              "name": "operation",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Mapping template to return the Lambda result to the caller."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 103
          },
          "name": "lambdaResult",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.MappingTemplate"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "this is called to render the mapping template to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/mapping-template.ts",
            "line": 110
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "MappingTemplate",
      "symbolId": "lib/mapping-template:MappingTemplate"
    },
    "@aws-cdk/aws-appsync-alpha.NoneDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BaseDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync dummy datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst noneDataSource = new appsync_alpha.NoneDataSource(this, 'MyNoneDataSource', {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 181
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 180
      },
      "name": "NoneDataSource",
      "symbolId": "lib/data-source:NoneDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.NoneDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync dummy datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\nconst noneDataSourceProps: appsync_alpha.NoneDataSourceProps = {\n  api: graphqlApi,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.NoneDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BaseDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 174
      },
      "name": "NoneDataSourceProps",
      "symbolId": "lib/data-source:NoneDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.OpenIdConnectConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration for OpenID Connect authorization in AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst openIdConnectConfig: appsync_alpha.OpenIdConnectConfig = {\n  oidcProvider: 'oidcProvider',\n\n  // the properties below are optional\n  clientId: 'clientId',\n  tokenExpiryFromAuth: 123,\n  tokenExpiryFromIssue: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.OpenIdConnectConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 136
      },
      "name": "OpenIdConnectConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "The issuer returned by discovery must exactly match the value of `iss` in the OIDC token.",
            "stability": "experimental",
            "summary": "The issuer for the OIDC configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 159
          },
          "name": "oidcProvider",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- * (All)",
            "example": "- 'ABCD|CDEF' // where ABCD and CDEF are two different clientId",
            "remarks": "A regular expression can be specified so AppSync can validate against multiple client identifiers at a time.",
            "stability": "experimental",
            "summary": "The client identifier of the Relying party at the OpenID identity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 155
          },
          "name": "clientId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no validation",
            "remarks": "`auth_time` claim in OIDC token is required for this validation to work.",
            "stability": "experimental",
            "summary": "The number of milliseconds an OIDC token is valid after being authenticated by OIDC provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 142
          },
          "name": "tokenExpiryFromAuth",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no validation",
            "remarks": "This validation uses `iat` claim of OIDC token.",
            "stability": "experimental",
            "summary": "The number of milliseconds an OIDC token is valid after being issued to a user."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 148
          },
          "name": "tokenExpiryFromIssue",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:OpenIdConnectConfig"
    },
    "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An Appsync datasource backed by OpenSearch.",
        "example": "import * as opensearch from 'aws-cdk-lib/aws-opensearchservice';\n\nconst user = new iam.User(this, 'User');\nconst domain = new opensearch.Domain(this, 'Domain', {\n  version: opensearch.EngineVersion.OPENSEARCH_1_3,\n  removalPolicy: RemovalPolicy.DESTROY,\n  fineGrainedAccessControl: { masterUserArn: user.userArn },\n  encryptionAtRest: { enabled: true },\n  nodeToNodeEncryption: true,\n  enforceHttps: true,\n});\n\ndeclare const api: appsync.GraphqlApi;\nconst ds = api.addOpenSearchDataSource('ds', domain);\n\nds.createResolver('QueryGetTestsResolver', {\n  typeName: 'Query',\n  fieldName: 'getTests',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(JSON.stringify({\n    version: '2017-02-28',\n    operation: 'GET',\n    path: '/id/post/_search',\n    params: {\n      headers: {},\n      queryString: {},\n      body: { from: 0, size: 50 },\n    },\n  })),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`[\n    #foreach($entry in $context.result.hits.hits)\n    #if( $velocityCount > 1 ) , #end\n    $utils.toJson($entry.get(\"_source\"))\n    #end\n  ]`),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 422
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 421
      },
      "name": "OpenSearchDataSource",
      "symbolId": "lib/data-source:OpenSearchDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.OpenSearchDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for the OpenSearch Data Source.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_opensearchservice as opensearchservice } from 'aws-cdk-lib';\n\ndeclare const domain: opensearchservice.Domain;\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\nconst openSearchDataSourceProps: appsync_alpha.OpenSearchDataSourceProps = {\n  api: graphqlApi,\n  domain: domain,\n\n  // the properties below are optional\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.OpenSearchDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 411
      },
      "name": "OpenSearchDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The OpenSearch domain containing the endpoint for the data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 415
          },
          "name": "domain",
          "type": {
            "fqn": "aws-cdk-lib.aws_opensearchservice.IDomain"
          }
        }
      ],
      "symbolId": "lib/data-source:OpenSearchDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.PartitionKey": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.PrimaryKey",
      "docs": {
        "remarks": "It can be\nenhanced with the assignment of the sort key.",
        "stability": "experimental",
        "summary": "Specifies the assignment to the partition key.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\nconst partitionKey = new appsync_alpha.PartitionKey(assign);",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKey",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 180
        },
        "parameters": [
          {
            "name": "pkey",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 179
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the sort key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 187
          },
          "name": "sort",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.SortKeyStep"
            }
          }
        }
      ],
      "name": "PartitionKey",
      "symbolId": "lib/key:PartitionKey"
    },
    "@aws-cdk/aws-appsync-alpha.PartitionKeyStep": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to allow assigning a value or an auto-generated id to a partition key.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst partitionKeyStep = new appsync_alpha.PartitionKeyStep('key');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKeyStep",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 108
        },
        "parameters": [
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 107
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the partition key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 120
          },
          "name": "auto",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKey"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the partition key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 113
          },
          "name": "is",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKey"
            }
          }
        }
      ],
      "name": "PartitionKeyStep",
      "symbolId": "lib/key:PartitionKeyStep"
    },
    "@aws-cdk/aws-appsync-alpha.PrimaryKey": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "remarks": "It either\ncontains the full primary key or only the partition key.",
        "stability": "experimental",
        "summary": "Specifies the assignment to the primary key.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.PrimaryKey",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 159
        },
        "parameters": [
          {
            "name": "pkey",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
            }
          },
          {
            "name": "skey",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 151
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the partition key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 155
          },
          "name": "partition",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.PartitionKeyStep"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Renders the key assignment to a VTL string."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 164
          },
          "name": "renderTemplate",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "PrimaryKey",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 159
          },
          "name": "pkey",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
          }
        }
      ],
      "symbolId": "lib/key:PrimaryKey"
    },
    "@aws-cdk/aws-appsync-alpha.RdsDataSource": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "@aws-cdk/aws-appsync-alpha.BackedDataSource",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync datasource backed by RDS.",
        "example": "// Create username and password secret for DB Cluster\nconst secret = new rds.DatabaseSecret(this, 'AuroraSecret', {\n  username: 'clusteradmin',\n});\n\n// The VPC to place the cluster in\nconst vpc = new ec2.Vpc(this, 'AuroraVpc');\n\n// Create the serverless cluster, provide all values needed to customise the database.\nconst cluster = new rds.ServerlessCluster(this, 'AuroraCluster', {\n  engine: rds.DatabaseClusterEngine.AURORA_MYSQL,\n  vpc,\n  credentials: { username: 'clusteradmin' },\n  clusterIdentifier: 'db-endpoint-test',\n  defaultDatabaseName: 'demos',\n});\n\n// Build a data source for AppSync to access the database.\ndeclare const api: appsync.GraphqlApi;\nconst rdsDS = api.addRdsDataSource('rds', cluster, secret, 'demos');\n\n// Set up a resolver for an RDS query.\nrdsDS.createResolver('QueryGetDemosRdsResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"SELECT * FROM demos\"\n    ]\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[0])\n  `),\n});\n\n// Set up a resolver for an RDS mutation.\nrdsDS.createResolver('MutationAddDemoRdsResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemoRds',\n  requestMappingTemplate: appsync.MappingTemplate.fromString(`\n  {\n    \"version\": \"2018-05-29\",\n    \"statements\": [\n      \"INSERT INTO demos VALUES (:id, :version)\",\n      \"SELECT * WHERE id = :id\"\n    ],\n    \"variableMap\": {\n      \":id\": $util.toJson($util.autoId()),\n      \":version\": $util.toJson($ctx.args.version)\n    }\n  }\n  `),\n  responseMappingTemplate: appsync.MappingTemplate.fromString(`\n    $utils.toJson($utils.rds.toJsonObject($ctx.result)[1][0])\n  `),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/data-source.ts",
          "line": 332
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 331
      },
      "name": "RdsDataSource",
      "symbolId": "lib/data-source:RdsDataSource"
    },
    "@aws-cdk/aws-appsync-alpha.RdsDataSourceProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for an AppSync RDS datasource.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_iam as iam } from 'aws-cdk-lib';\nimport { aws_rds as rds } from 'aws-cdk-lib';\nimport { aws_secretsmanager as secretsmanager } from 'aws-cdk-lib';\n\ndeclare const graphqlApi: appsync_alpha.GraphqlApi;\ndeclare const role: iam.Role;\ndeclare const secret: secretsmanager.Secret;\ndeclare const serverlessCluster: rds.ServerlessCluster;\nconst rdsDataSourceProps: appsync_alpha.RdsDataSourceProps = {\n  api: graphqlApi,\n  secretStore: secret,\n  serverlessCluster: serverlessCluster,\n\n  // the properties below are optional\n  databaseName: 'databaseName',\n  description: 'description',\n  name: 'name',\n  serviceRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.RdsDataSourceProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.BackedDataSourceProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/data-source.ts",
        "line": 311
      },
      "name": "RdsDataSourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The secret containing the credentials for the database."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 319
          },
          "name": "secretStore",
          "type": {
            "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The serverless cluster to call to interact with this data source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 315
          },
          "name": "serverlessCluster",
          "type": {
            "fqn": "aws-cdk-lib.aws_rds.IServerlessCluster"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- None",
            "stability": "experimental",
            "summary": "The name of the database to use within the cluster."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/data-source.ts",
            "line": 325
          },
          "name": "databaseName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/data-source:RdsDataSourceProps"
    },
    "@aws-cdk/aws-appsync-alpha.Resolver": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "base": "constructs.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "An AppSync resolver.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.Resolver",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/resolver.ts",
          "line": 89
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ResolverProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 81
      },
      "name": "Resolver",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "the ARN of the resolver."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 85
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/resolver:Resolver"
    },
    "@aws-cdk/aws-appsync-alpha.ResolverProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Additional property for an AppSync resolver for GraphQL API reference.",
        "example": "declare const api: appsync.GraphqlApi;\ndeclare const appsyncFunction: appsync.AppsyncFunction;\n\nconst pipelineResolver = new appsync.Resolver(this, 'pipeline', {\n  api,\n  dataSource: api.addNoneDataSource('none'),\n  typeName: 'typeName',\n  fieldName: 'fieldName',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('beforeRequest.vtl'),\n  pipelineConfig: [appsyncFunction],\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('afterResponse.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.ResolverProps",
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.ExtendedResolverProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/resolver.ts",
        "line": 71
      },
      "name": "ResolverProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The API this resolver is attached to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/resolver.ts",
            "line": 75
          },
          "name": "api",
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
          }
        }
      ],
      "symbolId": "lib/resolver:ResolverProps"
    },
    "@aws-cdk/aws-appsync-alpha.SchemaBindOptions": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "remarks": "This is intended to prevent breaking changes to implementors of ISchema\nif needing to add new behavior.",
        "stability": "experimental",
        "summary": "Used for configuring schema bind behavior.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nconst schemaBindOptions: appsync_alpha.SchemaBindOptions = { };",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.SchemaBindOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 27
      },
      "name": "SchemaBindOptions",
      "symbolId": "lib/schema:SchemaBindOptions"
    },
    "@aws-cdk/aws-appsync-alpha.SchemaFile": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "remarks": "If no options are configured, schema will be generated\ncode-first.",
        "stability": "experimental",
        "summary": "The Schema for a GraphQL Api.",
        "example": "const api = new appsync.GraphqlApi(this, 'api', {\n  name: 'api',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n});\n\nconst httpDs = api.addHttpDataSource(\n  'ds',\n  'https://states.amazonaws.com',\n  {\n    name: 'httpDsWithStepF',\n    description: 'from appsync to StepFunctions Workflow',\n    authorizationConfig: {\n      signingRegion: 'us-east-1',\n      signingServiceName: 'states',\n    }\n  }\n);\n\nhttpDs.createResolver('MutationCallStepFunctionResolver', {\n  typeName: 'Mutation',\n  fieldName: 'callStepFunction',\n  requestMappingTemplate: appsync.MappingTemplate.fromFile('request.vtl'),\n  responseMappingTemplate: appsync.MappingTemplate.fromFile('response.vtl'),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.SchemaFile",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/schema.ts",
          "line": 79
        },
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.SchemaProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-appsync-alpha.ISchema"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 63
      },
      "methods": [
        {
          "docs": {
            "returns": "`SchemaAsset` with immutable schema defintion",
            "stability": "experimental",
            "summary": "Generate a Schema from file."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 70
          },
          "name": "fromAsset",
          "parameters": [
            {
              "docs": {
                "summary": "the file path of the schema file."
              },
              "name": "filePath",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.SchemaFile"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the GraphQL Api is initialized to allow this object to bind to the stack."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 89
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-appsync-alpha.ISchema",
          "parameters": [
            {
              "docs": {
                "summary": "The binding GraphQL Api."
              },
              "name": "api",
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.IGraphqlApi"
              }
            },
            {
              "name": "_options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-appsync-alpha.SchemaBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.ISchemaConfig"
            }
          }
        }
      ],
      "name": "SchemaFile",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The definition for this schema."
          },
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 77
          },
          "name": "definition",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/schema:SchemaFile"
    },
    "@aws-cdk/aws-appsync-alpha.SchemaProps": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "The options for configuring a schema from an existing file.",
        "example": "import * as acm from 'aws-cdk-lib/aws-certificatemanager';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\n\nconst myDomainName = 'api.example.com';\nconst certificate = new acm.Certificate(this, 'cert', { domainName: myDomainName });\nconst schema = new appsync.SchemaFile({ filePath: 'mySchemaFile' })\nconst api = new appsync.GraphqlApi(this, 'api', {\n  name: 'myApi',\n  schema,\n  domainName: {\n    certificate,\n    domainName: myDomainName,\n  },\n});\n\n// hosted zone and route53 features\ndeclare const hostedZoneId: string;\ndeclare const zoneName = 'example.com';\n\n// hosted zone for adding appsync domain\nconst zone = route53.HostedZone.fromHostedZoneAttributes(this, `HostedZone`, {\n  hostedZoneId,\n  zoneName,\n});\n\n// create a cname to the appsync domain. will map to something like xxxx.cloudfront.net\nnew route53.CnameRecord(this, `CnameApiRecord`, {\n  recordName: 'api',\n  zone,\n  domainName: api.appSyncDomainName,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.SchemaProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/schema.ts",
        "line": 48
      },
      "name": "SchemaProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "When this option is\nconfigured, then the schema will be generated from an\nexisting file from disk.",
            "stability": "experimental",
            "summary": "The file path for the schema."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/schema.ts",
            "line": 54
          },
          "name": "filePath",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/schema:SchemaProps"
    },
    "@aws-cdk/aws-appsync-alpha.SortKeyStep": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class to allow assigning a value or an auto-generated id to a sort key.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\n\ndeclare const assign: appsync_alpha.Assign;\nconst sortKeyStep = new appsync_alpha.SortKeyStep(assign, 'skey');",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.SortKeyStep",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/key.ts",
          "line": 130
        },
        "parameters": [
          {
            "name": "pkey",
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.Assign"
            }
          },
          {
            "name": "skey",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 129
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the sort key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 142
          },
          "name": "auto",
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.PrimaryKey"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Assign an auto-generated value to the sort key."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 135
          },
          "name": "is",
          "parameters": [
            {
              "name": "val",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.PrimaryKey"
            }
          }
        }
      ],
      "name": "SortKeyStep",
      "symbolId": "lib/key:SortKeyStep"
    },
    "@aws-cdk/aws-appsync-alpha.UserPoolConfig": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Configuration for Cognito user-pools in AppSync.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as appsync_alpha from '@aws-cdk/aws-appsync-alpha';\nimport { aws_cognito as cognito } from 'aws-cdk-lib';\n\ndeclare const userPool: cognito.UserPool;\nconst userPoolConfig: appsync_alpha.UserPoolConfig = {\n  userPool: userPool,\n\n  // the properties below are optional\n  appIdClientRegex: 'appIdClientRegex',\n  defaultAction: appsync_alpha.UserPoolDefaultAction.ALLOW,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.UserPoolConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 89
      },
      "name": "UserPoolConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Cognito user pool to use as identity source."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 93
          },
          "name": "userPool",
          "type": {
            "fqn": "aws-cdk-lib.aws_cognito.IUserPool"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "-  None",
            "stability": "experimental",
            "summary": "the optional app id regex."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 99
          },
          "name": "appIdClientRegex",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "ALLOW",
            "stability": "experimental",
            "summary": "Default auth action."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/graphqlapi.ts",
            "line": 105
          },
          "name": "defaultAction",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-appsync-alpha.UserPoolDefaultAction"
          }
        }
      ],
      "symbolId": "lib/graphqlapi:UserPoolConfig"
    },
    "@aws-cdk/aws-appsync-alpha.UserPoolDefaultAction": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "enum with all possible values for Cognito user-pool default actions."
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.UserPoolDefaultAction",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/graphqlapi.ts",
        "line": 75
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "ALLOW access to API."
          },
          "name": "ALLOW"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "DENY access to API."
          },
          "name": "DENY"
        }
      ],
      "name": "UserPoolDefaultAction",
      "symbolId": "lib/graphqlapi:UserPoolDefaultAction"
    },
    "@aws-cdk/aws-appsync-alpha.Values": {
      "assembly": "@aws-cdk/aws-appsync-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Factory class for attribute value assignments.",
        "example": "const api = new appsync.GraphqlApi(this, 'Api', {\n  name: 'demo',\n  schema: appsync.SchemaFile.fromAsset(path.join(__dirname, 'schema.graphql')),\n  authorizationConfig: {\n    defaultAuthorization: {\n      authorizationType: appsync.AuthorizationType.IAM,\n    },\n  },\n  xrayEnabled: true,\n});\n\nconst demoTable = new dynamodb.Table(this, 'DemoTable', {\n  partitionKey: {\n    name: 'id',\n    type: dynamodb.AttributeType.STRING,\n  },\n});\n\nconst demoDS = api.addDynamoDbDataSource('demoDataSource', demoTable);\n\n// Resolver for the Query \"getDemos\" that scans the DynamoDb table and returns the entire list.\n// Resolver Mapping Template Reference:\n// https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html\ndemoDS.createResolver('QueryGetDemosResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemos',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});\n\n// Resolver for the Mutation \"addDemo\" that puts the item into the DynamoDb table.\ndemoDS.createResolver('MutationAddDemoResolver', {\n  typeName: 'Mutation',\n  fieldName: 'addDemo',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbPutItem(\n    appsync.PrimaryKey.partition('id').auto(),\n    appsync.Values.projecting('input'),\n  ),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultItem(),\n});\n\n//To enable DynamoDB read consistency with the `MappingTemplate`:\ndemoDS.createResolver('QueryGetDemosConsistentResolver', {\n  typeName: 'Query',\n  fieldName: 'getDemosConsistent',\n  requestMappingTemplate: appsync.MappingTemplate.dynamoDbScanTable(true),\n  responseMappingTemplate: appsync.MappingTemplate.dynamoDbResultList(),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-appsync-alpha.Values",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/key.ts",
        "line": 239
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows assigning a value to the specified attribute."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 253
          },
          "name": "attribute",
          "parameters": [
            {
              "name": "attr",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValuesStep"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "It’s opinionated about how it represents\nsome of the nested objects: e.g., it will use lists (“L”) rather than sets\n(“SS”, “NS”, “BS”). By default it projects the argument container (\"$ctx.args\").",
            "stability": "experimental",
            "summary": "Treats the specified object as a map of assignments, where the property names represent attribute names."
          },
          "locationInModule": {
            "filename": "lib/key.ts",
            "line": 246
          },
          "name": "projecting",
          "parameters": [
            {
              "name": "arg",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-appsync-alpha.AttributeValues"
            }
          },
          "static": true
        }
      ],
      "name": "Values",
      "symbolId": "lib/key:Values"
    }
  },
  "version": "2.59.0-alpha.0",
  "fingerprint": "**********"
}