"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaFile = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs_1 = require("fs");
;
/**
 * The Schema for a GraphQL Api
 *
 * If no options are configured, schema will be generated
 * code-first.
 */
class SchemaFile {
    constructor(options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_appsync_alpha_SchemaProps(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, SchemaFile);
            }
            throw error;
        }
        this.definition = fs_1.readFileSync(options.filePath).toString('utf-8');
    }
    /**
     * Generate a Schema from file
     *
     * @returns `SchemaAsset` with immutable schema defintion
     * @param filePath the file path of the schema file
     */
    static fromAsset(filePath) {
        return new SchemaFile({ filePath });
    }
    /**
     * Called when the GraphQL Api is initialized to allow this object to bind
     * to the stack.
     *
     * @param api The binding GraphQL Api
     */
    bind(api, _options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_appsync_alpha_IGraphqlApi(api);
            jsiiDeprecationWarnings._aws_cdk_aws_appsync_alpha_SchemaBindOptions(_options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bind);
            }
            throw error;
        }
        return {
            apiId: api.apiId,
            definition: this.definition,
        };
    }
}
exports.SchemaFile = SchemaFile;
_a = JSII_RTTI_SYMBOL_1;
SchemaFile[_a] = { fqn: "@aws-cdk/aws-appsync-alpha.SchemaFile", version: "2.59.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJCQUFrQztBQXNEakMsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsTUFBYSxVQUFVO0lBZ0JyQixZQUFtQixPQUFvQjs7Ozs7OytDQWhCNUIsVUFBVTs7OztRQWlCbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDcEU7SUFqQkQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQWdCO1FBQ3RDLE9BQU8sSUFBSSxVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ3JDO0lBV0Q7Ozs7O09BS0c7SUFDSSxJQUFJLENBQUMsR0FBZ0IsRUFBRSxRQUE0Qjs7Ozs7Ozs7Ozs7UUFDeEQsT0FBTztZQUNMLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDNUIsQ0FBQztLQUNIOztBQS9CSCxnQ0FnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBJR3JhcGhxbEFwaSB9IGZyb20gJy4vZ3JhcGhxbGFwaS1iYXNlJztcblxuLyoqXG4gICogQ29uZmlndXJhdGlvbiBmb3IgYm91bmQgZ3JhcGhxbCBzY2hlbWFcbiAgKlxuICAqIFJldHVybmVkIGZyb20gSVNjaGVtYS5iaW5kIGFsbG93aW5nIGxhdGUgYmluZGluZyBvZiBzY2hlbWFzIHRvIGdyYXBocWxhcGktYmFzZVxuICAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2NoZW1hQ29uZmlnIHtcbiAgLyoqXG4gICAgKiBUaGUgSUQgb2YgdGhlIGFwaSB0aGUgc2NoZW1hIGlzIGJvdW5kIHRvXG4gICAgKi9cbiAgYXBpSWQ6IHN0cmluZztcblxuICAvKipcbiAgICAqIFRoZSBzY2hlbWEgZGVmaW5pdGlvbiBzdHJpbmdcbiAgICAqL1xuICBkZWZpbml0aW9uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogVXNlZCBmb3IgY29uZmlndXJpbmcgc2NoZW1hIGJpbmQgYmVoYXZpb3IuXG4gKlxuICogVGhpcyBpcyBpbnRlbmRlZCB0byBwcmV2ZW50IGJyZWFraW5nIGNoYW5nZXMgdG8gaW1wbGVtZW50b3JzIG9mIElTY2hlbWFcbiAqIGlmIG5lZWRpbmcgdG8gYWRkIG5ldyBiZWhhdmlvci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2hlbWFCaW5kT3B0aW9ucyB7fVxuXG4vKipcbiAgKiBJbnRlcmZhY2UgZm9yIGltcGxlbWVudGluZyB5b3VyIG93biBzY2hlbWFcbiAgKlxuICAqIFVzZWZ1bCBmb3IgcHJvdmlkaW5nIHNjaGVtYSdzIGZyb20gc291cmNlcyBvdGhlciB0aGFuIGFzc2V0c1xuICAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2NoZW1hIHtcbiAgLyoqXG4gICAgKiBCaW5kcyBhIHNjaGVtYSBzdHJpbmcgdG8gYSBHcmFwaFFsQXBpXG4gICAgKlxuICAgICogQHJldHVybnMgSVNjaGVtYUNvbmZpZyB3aXRoIGFwaUlkIGFuZCBzY2hlbWEgZGVmaW5pdGlvbiBzdHJpbmdcbiAgICAqIEBwYXJhbSBhcGkgdGhlIGFwaSB0byBiaW5kIHRoZSBzY2hlbWEgdG9cbiAgICAqIEBwYXJhbSBvcHRpb25zIGNvbmZpZ3VyYXRpb24gZm9yIGJpbmQgYmVoYXZpb3JcbiAgICAqL1xuICBiaW5kKGFwaTogSUdyYXBocWxBcGksIG9wdGlvbnM/OiBTY2hlbWFCaW5kT3B0aW9ucyk6IElTY2hlbWFDb25maWc7XG59XG5cbi8qKlxuICogVGhlIG9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIGEgc2NoZW1hIGZyb20gYW4gZXhpc3RpbmcgZmlsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVtYVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBmaWxlIHBhdGggZm9yIHRoZSBzY2hlbWEuIFdoZW4gdGhpcyBvcHRpb24gaXNcbiAgICogY29uZmlndXJlZCwgdGhlbiB0aGUgc2NoZW1hIHdpbGwgYmUgZ2VuZXJhdGVkIGZyb20gYW5cbiAgICogZXhpc3RpbmcgZmlsZSBmcm9tIGRpc2suXG4gICAqL1xuICByZWFkb25seSBmaWxlUGF0aDogc3RyaW5nLFxufTtcblxuLyoqXG4gKiBUaGUgU2NoZW1hIGZvciBhIEdyYXBoUUwgQXBpXG4gKlxuICogSWYgbm8gb3B0aW9ucyBhcmUgY29uZmlndXJlZCwgc2NoZW1hIHdpbGwgYmUgZ2VuZXJhdGVkXG4gKiBjb2RlLWZpcnN0LlxuICovXG5leHBvcnQgY2xhc3MgU2NoZW1hRmlsZSBpbXBsZW1lbnRzIElTY2hlbWEge1xuICAvKipcbiAgICogR2VuZXJhdGUgYSBTY2hlbWEgZnJvbSBmaWxlXG4gICAqXG4gICAqIEByZXR1cm5zIGBTY2hlbWFBc3NldGAgd2l0aCBpbW11dGFibGUgc2NoZW1hIGRlZmludGlvblxuICAgKiBAcGFyYW0gZmlsZVBhdGggdGhlIGZpbGUgcGF0aCBvZiB0aGUgc2NoZW1hIGZpbGVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFzc2V0KGZpbGVQYXRoOiBzdHJpbmcpOiBTY2hlbWFGaWxlIHtcbiAgICByZXR1cm4gbmV3IFNjaGVtYUZpbGUoeyBmaWxlUGF0aCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmaW5pdGlvbiBmb3IgdGhpcyBzY2hlbWFcbiAgICovXG4gIHB1YmxpYyBkZWZpbml0aW9uOiBzdHJpbmc7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFNjaGVtYVByb3BzKSB7XG4gICAgdGhpcy5kZWZpbml0aW9uID0gcmVhZEZpbGVTeW5jKG9wdGlvbnMuZmlsZVBhdGgpLnRvU3RyaW5nKCd1dGYtOCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSBHcmFwaFFMIEFwaSBpcyBpbml0aWFsaXplZCB0byBhbGxvdyB0aGlzIG9iamVjdCB0byBiaW5kXG4gICAqIHRvIHRoZSBzdGFjay5cbiAgICpcbiAgICogQHBhcmFtIGFwaSBUaGUgYmluZGluZyBHcmFwaFFMIEFwaVxuICAgKi9cbiAgcHVibGljIGJpbmQoYXBpOiBJR3JhcGhxbEFwaSwgX29wdGlvbnM/OiBTY2hlbWFCaW5kT3B0aW9ucyk6IElTY2hlbWFDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBhcGlJZDogYXBpLmFwaUlkLFxuICAgICAgZGVmaW5pdGlvbjogdGhpcy5kZWZpbml0aW9uLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==